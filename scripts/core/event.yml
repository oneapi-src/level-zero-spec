#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Event"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported event pool creation flags"
class: $xEventPool
name: $x_event_pool_flags_t
etors:
    - name: HOST_VISIBLE
      desc: "signals and waits are also visible to host"
    - name: IPC
      desc: "signals and waits may be shared across processes"
    - name: KERNEL_TIMESTAMP
      desc:
            "1.0": "Indicates all events in pool will contain kernel timestamps; cannot be combined with $X_EVENT_POOL_FLAG_IPC"
            "1.5": "Indicates all events in pool will contain kernel timestamps"
    - name: KERNEL_MAPPED_TIMESTAMP
      desc: "Indicates all events in pool will contain kernel timestamps synchronized to host time domain; cannot be combined with $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP"
      version: "1.6"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event pool descriptor"
class: $xEventPool
name: $x_event_pool_desc_t
base: $x_base_desc_t
members:
    - type: $x_event_pool_flags_t
      name: flags
      desc: |
            [in] creation flags.
            must be 0 (default) or a valid combination of $x_event_pool_flag_t;
            default behavior is signals and waits are visible to the entire device and peer devices.
      init: "0"
    - type: uint32_t
      name: count
      desc: "[in] number of events within the pool; must be greater than 0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a pool of events on the context."
class: $xEventPool
name: Create
decl: static
ordinal: "0"
details:
    - "The application must only use events within the pool for the device(s), or their sub-devices, which were provided during creation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_event_pool_desc_t*"
      name: desc
      desc: "[in] pointer to event pool descriptor"
    - type: uint32_t
      name: numDevices
      desc: "[in][optional] number of device handles; must be 0 if `nullptr == phDevices`"
    - type: $x_device_handle_t*
      name: phDevices
      desc: |
            [in][optional][range(0, numDevices)] array of device handles which have visibility to the event pool.
            if nullptr, then event pool is visible to all devices supported by the driver instance.
    - type: "$x_event_pool_handle_t*"
      name: phEventPool
      desc: "[out] pointer handle of event pool object created"
returns:
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`0 == desc->count`"
        - "`(nullptr == phDevices) && (0 < numDevices)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes an event pool object."
class: $xEventPool
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must destroy all event handles created from the pool before destroying the pool itself."
    - "The application must ensure the device is not currently referencing the any event within the pool before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this event pool."
    - "The application must **not** call this function from simultaneous threads with the same event pool handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_event_pool_handle_t
      name: hEventPool
      desc: "[in][release] handle of event pool object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported event scope flags"
class: $xEvent
name: $x_event_scope_flags_t
etors:
    - name: SUBDEVICE
      value: "$X_BIT(0)"
      desc: "cache hierarchies are flushed or invalidated sufficient for local sub-device access"
    - name: DEVICE
      value: "$X_BIT(1)"
      desc: "cache hierarchies are flushed or invalidated sufficient for global device access and peer device access"
    - name: HOST
      value: "$X_BIT(2)"
      desc: "cache hierarchies are flushed or invalidated sufficient for device and host access"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event descriptor"
class: $xEvent
name: $x_event_desc_t
base: $x_base_desc_t
members:
    - type: uint32_t
      name: index
      desc: "[in] index of the event within the pool; must be less than the count specified during pool creation"
    - type: $x_event_scope_flags_t
      name: signal
      desc: |
            [in] defines the scope of relevant cache hierarchies to flush on a signal action before the event is triggered.
            must be 0 (default) or a valid combination of $x_event_scope_flag_t;
            default behavior is synchronization within the command list only, no additional cache hierarchies are flushed.
      init: "0"
    - type: $x_event_scope_flags_t
      name: wait
      desc: |
            [in] defines the scope of relevant cache hierarchies to invalidate on a wait action after the event is complete.
            must be 0 (default) or a valid combination of $x_event_scope_flag_t;
            default behavior is synchronization within the command list only, no additional cache hierarchies are invalidated.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an event from the pool."
class: $xEvent
name: Create
decl: static
ordinal: "0"
analogue:
    - "**clCreateUserEvent**"
    - vkCreateEvent
details:
    - "An event is used to communicate fine-grain host-to-device, device-to-host or device-to-device dependencies have completed."
    - "The application must ensure the location in the pool is not being used by another event."
    - "The application must **not** call this function from simultaneous threads with the same event pool handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_pool_handle_t
      name: hEventPool
      desc: "[in] handle of the event pool"
    - type: "const $x_event_desc_t*"
      name: desc
      desc: "[in] pointer to event descriptor"
    - type: "$x_event_handle_t*"
      name: phEvent
      desc: "[out] pointer to handle of event object created"
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes an event object."
class: $xEvent
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the event before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this event."
    - "The application must **not** call this function from simultaneous threads with the same event handle."
    - "The implementation of this function should be lock-free."
analogue:
     - "**clReleaseEvent**"
     - vkDestroyEvent
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in][release] handle of event object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Gets an IPC event pool handle for the specified event handle that can be shared with another process."
class: $xEventPool
name: GetIpcHandle
details:
    - "Event pool must have been created with $X_EVENT_POOL_FLAG_IPC."
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_event_pool_handle_t
      name: hEventPool
      desc: "[in] handle of event pool object"
    - type: $x_ipc_event_pool_handle_t*
      name: phIpc
      desc: "[out] Returned IPC event handle"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "Returns an IPC event pool handle to the driver"
version: "1.6"
class: $xEventPool
name: PutIpcHandle
decl: static
details:
    - "This call must be used for IPC handles previously obtained with $xEventPoolGetIpcHandle."
    - |
      Upon call, driver may release any underlying resources associated with the IPC handle.
      For instance, it may close the file descriptor contained in the IPC handle, if such type of handle is being used by the driver.
    - "This call does not destroy the original event pool for which the IPC handle was created."
    - "This function may **not** be called from simultaneous threads with the same IPC handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object associated with the IPC event pool handle"
    - type: $x_ipc_event_pool_handle_t
      name: hIpc
      desc: "[in] IPC event pool handle"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens an IPC event pool handle to retrieve an event pool handle from another process."
class: $xEventPool
name: OpenIpcHandle
decl: static
details:
    - "Multiple calls to this function with the same IPC handle will return unique event pool handles."
    - "The event handle in this process should not be freed with $xEventPoolDestroy, but rather with $xEventPoolCloseIpcHandle."
    - |
      If the original event pool has been created for a device containing a number of sub-devices, then the event pool
      returned by this call may be used on a device containing the same number of sub-devices, or on any of
      those sub-devices.
    - |
      However, if the original event pool has been created for a sub-device, then the event pool returned by this call
      cannot be used on a device containing any number of sub-devices, and must be used only in a sub-device. This ensures
      functional correctness for any implementation or optimizations the underlying Level Zero driver may do on
      event pools and events.
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object to associate with the IPC event pool handle"
    - type: $x_ipc_event_pool_handle_t
      name: hIpc
      desc: "[in] IPC event pool handle"
    - type: "$x_event_pool_handle_t*"
      name: phEventPool
      desc: "[out] pointer handle of event pool object created"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes an IPC event handle in the current process."
class: $xEventPool
name: CloseIpcHandle
details:
    - "Closes an IPC event handle by destroying events that were opened in this process using $xEventPoolOpenIpcHandle."
    - "The application must **not** call this function from simultaneous threads with the same event pool handle."
params:
    - type: $x_event_pool_handle_t
      name: hEventPool
      desc: "[in][release] handle of event pool object"
--- #--------------------------------------------------------------------------
type: function
desc: "Appends a signal of the event from the device into a command list."
class: $xCommandList
name: AppendSignalEvent
analogue:
    - "**clSetUserEventStatus**"
    - vkCmdSetEvent
details:
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The duration of an event created from an event pool that was created using $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP or $X_EVENT_POOL_FLAG_KERNEL_MAPPED_TIMESTAMP flags is undefined. However, for consistency and orthogonality the event will report correctly as signaled when used by other event API functionality."
    - "The application must ensure the command list and events were created on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "Appends wait on event(s) on the device into a command list."
class: $xCommandList
name: AppendWaitOnEvents
details:
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: uint32_t
      name: numEvents
      desc: "[in] number of events to wait on before continuing"
    - type: "$x_event_handle_t*"
      name: phEvents
      desc: "[in][range(0, numEvents)] handles of the events to wait on before continuing"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "Signals a event from host."
class: $xEvent
name: HostSignal
analogue:
    - clSetUserEventStatus
details:
    - "The duration of an event created from an event pool that was created using $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP or $X_EVENT_POOL_FLAG_KERNEL_MAPPED_TIMESTAMP flags is undefined. However, for consistency and orthogonality the event will report correctly as signaled when used by other event API functionality."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread waits on an event to be signaled."
class: $xEvent
name: HostSynchronize
analogue:
    - clWaitForEvents
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
    - type: "uint64_t"
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in nanoseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then operates exactly like $xEventQueryStatus;
            if `UINT64_MAX`, then function will not return until complete or device is lost.
            Due to external dependencies, timeout may be rounded to the closest value allowed by the accuracy of those dependencies.
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
       - "timeout expired"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries an event object's status on the host."
class: $xEvent
name: QueryStatus
analogue:
    - "**clGetEventInfo**"
    - vkGetEventStatus
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
        - not signaled
--- #--------------------------------------------------------------------------
type: function
desc: "Appends a reset of an event back to not signaled state into a command list."
class: $xCommandList
name: AppendEventReset
analogue:
    - vkResetEvent
details:
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread resets an event back to not signaled state."
class: $xEvent
name: HostReset
analogue:
    - vkResetEvent
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
--- #--------------------------------------------------------------------------
type: struct
desc: "Kernel timestamp clock data"
class: $xEvent
name: $x_kernel_timestamp_data_t
details:
    - "The timestamp frequency can be queried from the `timerResolution` member of $x_device_properties_t."
    - "The number of valid bits in the timestamp value can be queried from the `kernelTimestampValidBits` member of $x_device_properties_t."
members:
    - type: uint64_t
      name: kernelStart
      desc: "[out] device clock at start of kernel execution"
    - type: uint64_t
      name: kernelEnd
      desc: "[out] device clock at end of kernel execution"
--- #--------------------------------------------------------------------------
type: struct
desc: "Kernel timestamp result"
class: $xEvent
name: $x_kernel_timestamp_result_t
members:
    - type: $x_kernel_timestamp_data_t
      name: global
      desc: "[out] wall-clock data"
    - type: $x_kernel_timestamp_data_t
      name: context
      desc: "[out] context-active data; only includes clocks while device context was actively executing."
--- #--------------------------------------------------------------------------
type: function
desc: "Queries an event's timestamp value on the host."
class: $xEvent
name: QueryKernelTimestamp
details:
    - "The application must ensure the event was created from an event pool that was created using $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP or $X_EVENT_POOL_FLAG_KERNEL_MAPPED_TIMESTAMP flag."
    - "The destination memory will be unmodified if the event has not been signaled."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
    - type: "$x_kernel_timestamp_result_t*"
      name: dstptr
      desc: "[in,out] pointer to memory for where timestamp result will be written."
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
        - not signaled
--- #--------------------------------------------------------------------------
type: function
desc: "Appends a query of an events' timestamp value(s) into a command list."
class: $xCommandList
name: AppendQueryKernelTimestamps
details:
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the events were created from an event pool that was created using $X_EVENT_POOL_FLAG_KERNEL_TIMESTAMP flag."
    - "The application must ensure the memory pointed to by both dstptr and pOffsets is accessible by the device on which the command list was created."
    - "The value(s) written to the destination buffer are undefined if any timestamp event has not been signaled."
    - "If pOffsets is nullptr, then multiple results will be appended sequentially into memory in the same order as phEvents."
    - "The application must ensure the command list and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: uint32_t
      name: numEvents
      desc: "[in] the number of timestamp events to query"
    - type: "$x_event_handle_t*"
      name: phEvents
      desc: "[in][range(0, numEvents)] handles of timestamp events to query"
    - type: "void*"
      name: dstptr
      desc: "[in,out] pointer to memory where $x_kernel_timestamp_result_t will be written; must be size-aligned."
    - type: "const size_t*"
      name: pOffsets
      desc: "[in][optional][range(0, numEvents)] offset, in bytes, to write results; address must be 4byte-aligned and offsets must be size-aligned."
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before executing query; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before executing query"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Gets the handle of the event pool for the event."
class: $xEvent
name: GetEventPool
version: "1.9"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
    - type: "$x_event_pool_handle_t*"
      name: phEventPool
      desc: "[out] handle of the event pool for the event"
--- #--------------------------------------------------------------------------
type: function
desc: "Gets the signal event scope."
class: $xEvent
name: GetSignalScope
version: "1.9"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
    - type: "$x_event_scope_flags_t*"
      name: pSignalScope
      desc: "[out] signal event scope. This is the scope of relevant cache hierarchies that are flushed on a signal action before the event is triggered. May be 0 or a valid combination of $x_event_scope_flag_t."
--- #--------------------------------------------------------------------------
type: function
desc: "Gets the wait event scope."
class: $xEvent
name: GetWaitScope
version: "1.9"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_handle_t
      name: hEvent
      desc: "[in] handle of the event"
    - type: "$x_event_scope_flags_t*"
      name: pWaitScope
      desc: "[out] wait event scope. This is the scope of relevant cache hierarchies invalidated on a wait action after the event is complete. May be 0 or a valid combination of $x_event_scope_flag_t."
--- #--------------------------------------------------------------------------
type: function
desc: "Gets the handle of the context on which the event pool was created."
class: $xEventPool
name: GetContextHandle
version: "1.9"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_pool_handle_t
      name: hEventPool
      desc: "[in] handle of the event pool"
    - type: "$x_context_handle_t*"
      name: phContext
      desc: "[out] handle of the context on which the event pool was created"
--- #--------------------------------------------------------------------------
type: function
desc: "Gets the creation flags used to create the event pool."
class: $xEventPool
name: GetFlags
version: "1.9"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_event_pool_handle_t
      name: hEventPool
      desc: "[in] handle of the event pool"
    - type: "$x_event_pool_flags_t*"
      name: pFlags
      desc: "[out] creation flags used to create the event pool; may be 0 or a valid combination of $x_event_pool_flag_t"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for event pool"
name: $xEventPool
owner: $xContext
members:
    - type: $x_event_pool_handle_t
      name: handle
      desc: "[in] handle of event pool object"
    - type: $xContext*
      name: pContext
      desc: "[in] pointer to owner object"
    - type: $x_event_pool_desc_t
      name: desc
      desc: "[in] descriptor of the event pool object"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for event"
name: $xEvent
owner: $xEventPool
members:
    - type: $x_event_handle_t
      name: handle
      desc: "[in] handle of event object"
    - type: $xEventPool*
      name: pEventPool
      desc: "[in] pointer to owner object"
    - type: $x_event_desc_t
      name: desc
      desc: "[in] descriptor of the event object"
