#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Memory"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory allocation flags"
class: $xMem
name: $x_device_mem_alloc_flags_t
etors:
    - name: BIAS_CACHED
      desc: "device should cache allocation"
    - name: BIAS_UNCACHED
      desc: "device should not cache allocation (UC)"
    - name: BIAS_INITIAL_PLACEMENT
      desc: "optimize shared allocation for first access on the device"
      version: "1.2"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device memory allocation descriptor"
class: $xMem
name: $x_device_mem_alloc_desc_t
base: $x_base_desc_t
members:
    - type: "$x_device_mem_alloc_flags_t"
      name: flags
      desc: |
            [in] flags specifying additional allocation controls.
            must be 0 (default) or a valid combination of $x_device_mem_alloc_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
    - type: uint32_t
      name: ordinal
      desc: |
            [in] ordinal of the device's local memory to allocate from.
            must be less than the count returned from $xDeviceGetMemoryProperties.
      init: "0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported host memory allocation flags"
class: $xMem
name: $x_host_mem_alloc_flags_t
etors:
    - name: BIAS_CACHED
      desc: "host should cache allocation"
    - name: BIAS_UNCACHED
      desc: "host should not cache allocation (UC)"
    - name: BIAS_WRITE_COMBINED
      desc: "host memory should be allocated write-combined (WC)"
    - name: BIAS_INITIAL_PLACEMENT
      desc: "optimize shared allocation for first access on the host"
      version: "1.2"
--- #--------------------------------------------------------------------------
type: struct
desc: "Host memory allocation descriptor"
class: $xMem
name: $x_host_mem_alloc_desc_t
base: $x_base_desc_t
members:
    - type: "$x_host_mem_alloc_flags_t"
      name: flags
      desc: |
            [in] flags specifying additional allocation controls.
            must be 0 (default) or a valid combination of $x_host_mem_alloc_flag_t;
            default behavior may use implicit driver-based heuristics.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates shared memory on the context."
class: $xMem
name: AllocShared
decl: static
details:
    - "Shared allocations share ownership between the host and one or more devices."
    - "Shared allocations may optionally be associated with a device by passing a handle to the device."
    - |
      Devices supporting only single-device shared access capabilities may access shared memory associated with the device.
      For these devices, ownership of the allocation is shared between the host and the associated device only.
    - |
      Passing nullptr as the device handle does not associate the shared allocation with any device.
      For allocations with no associated device, ownership of the allocation is shared between the host and all devices supporting cross-device shared access capabilities.
    - "The application must only use the memory allocation for the context and device, or its sub-devices, which was provided during allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_device_mem_alloc_desc_t*"
      name: device_desc
      desc: "[in] pointer to device memory allocation descriptor"
    - type: "const $x_host_mem_alloc_desc_t*"
      name: host_desc
      desc: "[in] pointer to host memory allocation descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate; must be less than or equal to the `maxMemAllocSize` member of $x_device_properties_t"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation; must be a power of two"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in][optional] device handle to associate with"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to shared allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates device memory on the context."
class: $xMem
name: AllocDevice
decl: static
details:
    - "Device allocations are owned by a specific device."
    - "In general, a device allocation may only be accessed by the device that owns it."
    - "The application must only use the memory allocation for the context and device, or its sub-devices, which was provided during allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_device_mem_alloc_desc_t*"
      name: device_desc
      desc: "[in] pointer to device memory allocation descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate; must be less than or equal to the `maxMemAllocSize` member of $x_device_properties_t"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation; must be a power of two"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
--- #--------------------------------------------------------------------------
type: function
desc: "Allocates host memory on the context."
class: $xMem
name: AllocHost
decl: static
details:
    - "Host allocations are owned by the host process."
    - "Host allocations are accessible by the host and all devices within the driver's context."
    - "Host allocations are frequently used as staging areas to transfer data to or from devices."
    - "The application must only use the memory allocation for the context which was provided during allocation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const $x_host_mem_alloc_desc_t*"
      name: host_desc
      desc: "[in] pointer to host memory allocation descriptor"
    - type: size_t
      name: size
      desc: "[in] size in bytes to allocate; must be less than or equal to the `maxMemAllocSize` member of $x_device_properties_t"
    - type: size_t
      name: alignment
      desc: "[in] minimum alignment in bytes for the allocation; must be a power of two"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to host allocation"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_SIZE:
        - "`0 == size`"
    - $X_RESULT_ERROR_UNSUPPORTED_ALIGNMENT:
        - "Must be zero or a power-of-two"
        - "`0 != (alignment & (alignment - 1))`"
--- #--------------------------------------------------------------------------
type: function
desc: "Frees allocated host memory, device memory, or shared memory on the context."
class: $xMem
name: Free
decl: static
details:
    - "The application must ensure the device is not currently referencing the memory before it is freed"
    - "The implementation will use the default and immediate policy to schedule all Host and Device allocations associated with this memory to be freed, without any safety checking. Actual freeing of memory is specific to user mode driver and kernel mode driver implementation and may be done asynchronously."
    - "The application must **not** call this function from simultaneous threads with the same pointer."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "void*"
      name: ptr
      desc: "[in][release] pointer to memory to free"
--- #--------------------------------------------------------------------------
type: enum
desc: "Memory allocation type"
class: $xMem
name: $x_memory_type_t
etors:
    - name: UNKNOWN
      value: "0"
      desc: "the memory pointed to is of unknown type"
    - name: HOST
      desc: "the memory pointed to is a host allocation"
    - name: DEVICE
      desc: "the memory pointed to is a device allocation"
    - name: SHARED
      desc: "the memory pointed to is a shared ownership allocation"
--- #--------------------------------------------------------------------------
type: struct
desc: "Memory allocation properties queried using $xMemGetAllocProperties"
class: $xMem
name: $x_memory_allocation_properties_t
base: $x_base_properties_t
members:
    - type: $x_memory_type_t
      name: type
      desc: "[out] type of allocated memory"
    - type: uint64_t
      name: id
      desc: "[out] identifier for this allocation"
    - type: uint64_t
      name: pageSize
      desc: "[out] page size used for allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves attributes of a memory allocation"
class: $xMem
name: GetAllocProperties
decl: static
details:
    - "The application may call this function from simultaneous threads."
    - |
      The application may query attributes of a memory allocation unrelated to the context.
      When this occurs, the returned allocation type will be $X_MEMORY_TYPE_UNKNOWN, and the returned identifier and associated device is unspecified.
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "$x_memory_allocation_properties_t*"
      name: pMemAllocProperties
      desc: "[in,out] query result for memory allocation properties"
    - type: "$x_device_handle_t*"
      name: phDevice
      desc: "[out][optional] device associated with this allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves the base address and/or size of an allocation"
class: $xMem
name: GetAddressRange
decl: static
details:
    - "The application may call this function from simultaneous threads."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] memory pointer to query"
    - type: "void**"
      name: pBase
      desc: "[in,out][optional] base address of the allocation"
    - type: size_t*
      name: pSize
      desc: "[in,out][optional] size of the allocation"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an IPC memory handle for the specified allocation"
class: $xMem
name: GetIpcHandle
decl: static
details:
    - "Takes a pointer to a device memory allocation and creates an IPC memory handle for exporting it for use in another process."
    - "1.0": "The pointer must be base pointer of a device memory allocation; i.e. the value returned from $xMemAllocDevice."
      "1.5": "The pointer must be base pointer of a device or host memory allocation; i.e. the value returned from $xMemAllocDevice or from $xMemAllocHost, respectively."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to the device memory allocation"
    - type: $x_ipc_mem_handle_t*
      name: pIpcHandle
      desc: "[out] Returned IPC memory handle"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an IPC memory handle out of a file descriptor"
version: "1.6"
class: $xMem
name: GetIpcHandleFromFileDescriptorExp
decl: static
details:
    - "Handle passed must be a valid file descriptor obtained with $x_external_memory_export_fd_t via $xMemGetAllocProperties."
    - "Returned IPC handle may contain metadata in addition to the file descriptor."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: uint64_t
      name: handle
      desc: "[in] file descriptor"
    - type: $x_ipc_mem_handle_t*
      name: pIpcHandle
      desc: "[out] Returned IPC memory handle"
--- #--------------------------------------------------------------------------
type: function
desc: "Gets the file descriptor contained in an IPC memory handle"
version: "1.6"
class: $xMem
name: GetFileDescriptorFromIpcHandleExp
decl: static
details:
    - "IPC memory handle must be a valid handle obtained with $xMemGetIpcHandle."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_ipc_mem_handle_t
      name: ipcHandle
      desc: "[in] IPC memory handle"
    - type: uint64_t*
      name: pHandle
      desc: "[out] Returned file descriptor"
--- #--------------------------------------------------------------------------
type: function
desc: "Returns an IPC memory handle to the driver"
version: "1.6"
class: $xMem
name: PutIpcHandle
decl: static
details:
    - |
      This call may be used for IPC handles previously obtained with either $xMemGetIpcHandle or with $x_external_memory_export_fd_t via $xMemGetAllocProperties.
    - |
      Upon call, driver may release any underlying resources associated with the IPC handle.
      For instance, it may close the file descriptor contained in the IPC handle, if such type of handle is being used by the driver.
    - "This call does not free the original allocation for which the IPC handle was created."
    - "This function may **not** be called from simultaneous threads with the same IPC handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_ipc_mem_handle_t
      name: handle
      desc: "[in] IPC memory handle"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IPC memory flags"
class: $xMem
name: $x_ipc_memory_flags_t
etors:
    - name: BIAS_CACHED
      desc: "device should cache allocation"
      version: "1.2"
    - name: BIAS_UNCACHED
      desc: "device should not cache allocation (UC)"
      version: "1.2"
--- #--------------------------------------------------------------------------
type: function
desc: "Opens an IPC memory handle to retrieve a device pointer on the context."
class: $xMem
name: OpenIpcHandle
decl: static
details:
    - "Takes an IPC memory handle from a remote process and associates it with a device pointer usable in this process."
    - "The device pointer in this process should not be freed with $xMemFree, but rather with $xMemCloseIpcHandle."
    - "Multiple calls to this function with the same IPC handle will return unique pointers."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device to associate with the IPC memory handle"
    - type: $x_ipc_mem_handle_t
      name: handle
      desc: "[in] IPC memory handle"
    - type: $x_ipc_memory_flags_t
      name: flags
      desc: |
            [in] flags controlling the operation.
            must be 0 (default) or a valid combination of $x_ipc_memory_flag_t.
      init: "0"
    - type: "void**"
      name: pptr
      desc: "[out] pointer to device allocation in this process"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes an IPC memory handle"
class: $xMem
name: CloseIpcHandle
decl: static
details:
    - "Closes an IPC memory handle by unmapping memory that was opened in this process using $xMemOpenIpcHandle."
    - "The application must **not** call this function from simultaneous threads with the same pointer."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "const void*"
      name: ptr
      desc: "[in][release] pointer to device allocation in this process"
--- #--------------------------------------------------------------------------
type: struct
desc: "Additional allocation descriptor for exporting external memory"
class: $xMem
name: $x_external_memory_export_desc_t
base: $x_base_desc_t
members:
    - type: $x_external_memory_type_flags_t
      name: flags
      desc: |
            [in] flags specifying memory export types for this allocation.
            must be 0 (default) or a valid combination of $x_external_memory_type_flags_t
      init: "0"
details:
    - "1.0": "This structure may be passed to $xMemAllocDevice, via the `pNext` member of $x_device_mem_alloc_desc_t, to indicate an exportable memory allocation."
      "1.5": "This structure may be passed to $xMemAllocDevice and $xMemAllocHost, via the `pNext` member of $x_device_mem_alloc_desc_t or $x_host_mem_alloc_desc_t, respectively, to indicate an exportable memory allocation."
    - "This structure may be passed to $xImageCreate, via the `pNext` member of $x_image_desc_t, to indicate an exportable image."
--- #--------------------------------------------------------------------------
type: struct
desc: "Additional allocation descriptor for importing external memory as a file descriptor"
class: $xMem
name: $x_external_memory_import_fd_t
base: $x_base_desc_t
members:
    - type: $x_external_memory_type_flags_t
      name: flags
      desc: |
            [in] flags specifying the memory import type for the file descriptor.
            must be 0 (default) or a valid combination of $x_external_memory_type_flags_t
      init: "0"
    - type: int
      name: fd
      desc: "[in] the file descriptor handle to import"
details:
    - "1.0": "This structure may be passed to $xMemAllocDevice, via the `pNext` member of $x_device_mem_alloc_desc_t, to import memory from a file descriptor."
      "1.5": "This structure may be passed to $xMemAllocDevice or $xMemAllocHost, via the `pNext` member of $x_device_mem_alloc_desc_t or of $x_host_mem_alloc_desc_t, respectively, to import memory from a file descriptor."
    - "This structure may be passed to $xImageCreate, via the `pNext` member of $x_image_desc_t, to import memory from a file descriptor."
--- #--------------------------------------------------------------------------
type: struct
desc: "Exports an allocation as a file descriptor"
class: $xMem
name: $x_external_memory_export_fd_t
base: $x_base_desc_t
members:
    - type: $x_external_memory_type_flags_t
      name: flags
      desc: |
            [in] flags specifying the memory export type for the file descriptor.
            must be 0 (default) or a valid combination of $x_external_memory_type_flags_t
      init: "0"
    - type: int
      name: fd
      desc: "[out] the exported file descriptor handle representing the allocation."
details:
    - "This structure may be passed to $xMemGetAllocProperties, via the `pNext` member of $x_memory_allocation_properties_t, to export a memory allocation as a file descriptor."
    - "This structure may be passed to $xImageGetAllocPropertiesExt, via the `pNext` member of $x_image_allocation_ext_properties_t, to export an image as a file descriptor."
    - "The requested memory export type must have been specified when the allocation was made."
--- #--------------------------------------------------------------------------
type: struct
desc: "Additional allocation descriptor for importing external memory as a Win32 handle"
version: "1.2"
class: $xMem
name: $x_external_memory_import_win32_handle_t
base: $x_base_desc_t
members:
    - type: $x_external_memory_type_flags_t
      name: flags
      desc: |
            [in] flags specifying the memory import type for the Win32 handle.
            must be 0 (default) or a valid combination of $x_external_memory_type_flags_t
      init: "0"
    - type: void*
      name: handle
      desc: "[in][optional] the Win32 handle to import"
    - type: const void*
      name: name
      desc: "[in][optional] name of a memory object to import"
details:
    - "When `handle` is `nullptr`, `name` must not be `nullptr`."
    - "When `name` is `nullptr`, `handle` must not be `nullptr`."
    - "When `flags` is $X_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32_KMT, `name` must be `nullptr`."
    - "1.0": "This structure may be passed to $xMemAllocDevice, via the `pNext` member of $x_device_mem_alloc_desc_t, to import memory from a Win32 handle."
      "1.5": "This structure may be passed to $xMemAllocDevice or $xMemAllocHost, via the `pNext` member of $x_device_mem_alloc_desc_t or of $x_host_mem_alloc_desc_t, respectively, to import memory from a Win32 handle."
    - "This structure may be passed to $xImageCreate, via the `pNext` member of $x_image_desc_t, to import memory from a Win32 handle."
--- #--------------------------------------------------------------------------
type: struct
desc: "Exports an allocation as a Win32 handle"
version: "1.2"
class: $xMem
name: $x_external_memory_export_win32_handle_t
base: $x_base_desc_t
members:
    - type: $x_external_memory_type_flags_t
      name: flags
      desc: |
            [in] flags specifying the memory export type for the Win32 handle.
            must be 0 (default) or a valid combination of $x_external_memory_type_flags_t
      init: "0"
    - type: void*
      name: handle
      desc: "[out] the exported Win32 handle representing the allocation."
details:
    - "This structure may be passed to $xMemGetAllocProperties, via the `pNext` member of $x_memory_allocation_properties_t, to export a memory allocation as a Win32 handle."
    - "This structure may be passed to $xImageGetAllocPropertiesExt, via the `pNext` member of $x_image_allocation_ext_properties_t, to export an image as a Win32 handle."
    - "The requested memory export type must have been specified when the allocation was made."
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for memory allocation"
name: $xMem
owner: $xContext
--- #--------------------------------------------------------------------------
type: enum
desc: "atomic access attribute flags"
class: $xMem
name: $x_memory_atomic_attr_exp_flags_t
version: "1.7"
etors:
    - name: NO_ATOMICS
      desc: "Atomics on the pointer are not allowed"
    - name: NO_HOST_ATOMICS
      desc: "Host atomics on the pointer are not allowed"
    - name: HOST_ATOMICS
      desc: "Host atomics on the pointer are allowed. Requires $X_MEMORY_ACCESS_CAP_FLAG_ATOMIC returned by $xDeviceGetMemoryAccessProperties."
    - name: NO_DEVICE_ATOMICS
      desc: "Device atomics on the pointer are not allowed"
    - name: DEVICE_ATOMICS
      desc: "Device atomics on the pointer are allowed. Requires $X_MEMORY_ACCESS_CAP_FLAG_ATOMIC returned by $xDeviceGetMemoryAccessProperties."
    - name: NO_SYSTEM_ATOMICS
      desc: "Concurrent atomics on the pointer from both host and device are not allowed"
    - name: SYSTEM_ATOMICS
      desc: "Concurrent atomics on the pointer from both host and device are allowed. Requires $X_MEMORY_ACCESS_CAP_FLAG_CONCURRENT_ATOMIC returned by $xDeviceGetMemoryAccessProperties."
--- #--------------------------------------------------------------------------
type: function
desc: "Sets atomic access attributes for a shared allocation"
class: $xMem
name: SetAtomicAccessAttributeExp
version: "1.7"
details:
    - |
      If the shared-allocation is owned by multiple devices (i.e. nullptr
      was passed to $xMemAllocShared when creating it), then hDevice may be
      passed to set the attributes in that specific device. If nullptr is
      passed in hDevice, then the atomic attributes are set in all devices
      associated with the allocation.
    - |
      If the atomic access attribute select is not supported by the driver,
      $X_RESULT_ERROR_INVALID_ARGUMENT is returned.
    - |
      The atomic access attribute may be only supported at a device-specific
      granularity, such as at a page boundary. In this case, the memory range
      may be expanded such that the start and end of the range satisfy granularity
      requirements.
    - |
      When calling this function multiple times with different flags, only the
      attributes from last call are honored.
    - |
      The application must not call this function for shared-allocations currently
      being used by the device.
    - |
      The application must **not** call this function from simultaneous threads
      with the same pointer.
    - |
      The implementation of this function should be lock-free.
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of context"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] device associated with the memory advice"
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: $x_memory_atomic_attr_exp_flags_t
      name: attr
      desc: |
            [in] Atomic access attributes to set for the specified range.
            Must be 0 (default) or a valid combination of $x_memory_atomic_attr_exp_flag_t.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves the atomic access attributes previously set for a shared allocation"
class: $xMem
name: GetAtomicAccessAttributeExp
version: "1.7"
details:
    - |
      The application may call this function from simultaneous threads
      with the same pointer.
    - |
      The implementation of this function should be lock-free.
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of context"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] device associated with the memory advice"
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: "$x_memory_atomic_attr_exp_flags_t*"
      name: pAttr
      desc: "[out] Atomic access attributes for the specified range"
