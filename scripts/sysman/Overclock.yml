#
# Copyright (C) 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for System Resource Management (Sysman) - Overclock controls, VF curve manipulation"
--- #--------------------------------------------------------------------------
type: enum
desc: "Overclock domains."
class: $sDevice
name: $s_overclock_domain_t
version: "1.5"
etors:
    - name: CARD
      value: "1"
      desc: "Overclocking card level properties such as temperature limits."
    - name: PACKAGE
      value: "2"
      desc: "Overclocking package level properties such as power limits."
    - name: GPU_ALL
      value: "4"
      desc: "Overclocking a GPU that has all accelerator assets on the same PLL/VR."
    - name: GPU_RENDER_COMPUTE
      value: "8"
      desc: "Overclocking a GPU with render and compute assets on the same PLL/VR."
    - name: GPU_RENDER
      value: "16"
      desc: "Overclocking a GPU with render assets on its own PLL/VR."
    - name: GPU_COMPUTE
      value: "32"
      desc: "Overclocking a GPU with compute assets on its own PLL/VR."
    - name: GPU_MEDIA
      value: "64"
      desc: "Overclocking a GPU with media assets on its own PLL/VR."
    - name: VRAM
      value: "128"
      desc: "Overclocking device local memory."
    - name: ADM
      value: "256"
      desc: "Overclocking LLC/L4 cache."
--- #--------------------------------------------------------------------------
type: enum
desc: "Overclock controls."
class: $sOverclock
name: $s_overclock_control_t
version: "1.5"
etors:
    - name: VF
      value: "1"
      desc: "This control permits setting a custom V-F curve."
    - name: FREQ_OFFSET
      value: "2"
      desc: "The V-F curve of the overclock domain can be shifted up or down using this control."
    - name: VMAX_OFFSET
      value: "4"
      desc: "This control is used to increase the permitted voltage above the shipped voltage maximum."
    - name: FREQ
      value: "8"
      desc: "This control permits direct changes to the operating frequency."
    - name: VOLT_LIMIT
      value: "16"
      desc: "This control prevents frequencies that would push the voltage above this value, typically used by V-F scanners."
    - name: POWER_SUSTAINED_LIMIT
      value: "32"
      desc: "This control changes the sustained power limit (PL1)."
    - name: POWER_BURST_LIMIT
      value: "64"
      desc: "This control changes the burst power limit (PL2)."
    - name: POWER_PEAK_LIMIT
      value: "128"
      desc: "his control changes the peak power limit (PL4)."
    - name: ICCMAX_LIMIT
      value: "256"
      desc: "This control changes the value of IccMax.."
    - name: TEMP_LIMIT
      value: "512"
      desc: "This control changes the value of TjMax."
    - name: ITD_DISABLE
      value: "1024"
      desc: "This control permits disabling the adaptive voltage feature ITD"
    - name: ACM_DISABLE
      value: "2048"
      desc: "This control permits disabling the adaptive voltage feature ACM."
--- #--------------------------------------------------------------------------
type: enum
desc: "Overclock modes."
class: $sOverclock
name: $s_overclock_mode_t
version: "1.5"
etors:
    - name: MODE_OFF
      value: "0"
      desc: "Overclock mode is off"
    - name: MODE_STOCK
      value: "2"
      desc: "Stock (manufacturing settings) are being used."
    - name: MODE_ON
      value: "3"
      desc: "Overclock mode is on."
    - name: MODE_UNAVAILABLE
      value: "4"
      desc: "Overclocking is unavailable at this time since the system is running on battery."
    - name: MODE_DISABLED
      value: "5"
      desc: "Overclock mode is disabled."
--- #--------------------------------------------------------------------------
type: enum
desc: "Overclock control states."
class: $sOverclock
name: $s_control_state_t
version: "1.5"
etors:
    - name: STATE_UNSET
      value: "0"
      desc: "No overclock control has not been changed by the driver since the last boot/reset."
    - name: STATE_ACTIVE
      value: "2"
      desc: "The overclock control has been set and it is active."
    - name: STATE_DISABLED
      value: "3"
      desc: "The overclock control value has been disabled due to the current power configuration (typically when running on DC)."
--- #--------------------------------------------------------------------------
type: enum
desc: "Overclock pending actions."
class: $sOverclock
name: $s_pending_action_t
version: "1.5"
etors:
    - name: PENDING_NONE
      value: "0"
      desc: "There no pending actions. ."
    - name: PENDING_IMMINENT
      value: "1"
      desc: "The requested change is in progress and should complete soon."
    - name: PENDING_COLD_RESET
      value: "2"
      desc: "The requested change requires a device cold reset (hotplug, system boot)."
    - name: PENDING_WARM_RESET
      value: "3"
      desc: "The requested change requires a device warm reset (PCIe FLR)."
--- #--------------------------------------------------------------------------
type: enum
desc: "Overclock V-F curve programing."
class: $sOverclock
name: $s_vf_program_type_t
version: "1.5"
etors:
    - name: VF_ARBITRARY
      value: "0"
      desc: "Can program an arbitrary number of V-F points up to the maximum number and each point can have arbitrary voltage and frequency values within the min/max/step limits"
    - name: VF_FREQ_FIXED
      value: "1"
      desc: "Can only program the voltage for the V-F points that it reads back - the frequency of those points cannot be changed"
    - name: VF_VOLT_FIXED
      value: "2"
      desc: "Can only program the frequency for the V-F points that is reads back - the voltage of each point cannot be changed."
--- #--------------------------------------------------------------------------
type: enum
desc: "VF type"
class: $sOverclock
name: $s_vf_type_t
version: "1.5"
etors:
    - name: VOLT
      value: "0"
      desc: "VF Voltage point"
    - name: FREQ
      value: "1"
      desc: "VF Frequency point"
--- #--------------------------------------------------------------------------
type: enum
desc: "VF type"
class: $sOverclock
name: $s_vf_array_type_t
version: "1.5"
etors:
    - name: USER_VF_ARRAY
      value: "0"
      desc: "User V-F array"
    - name: DEFAULT_VF_ARRAY
      value: "1"
      desc: "Default V-F array"
    - name: LIVE_VF_ARRAY
      value: "2"
      desc: "Live V-F array"
--- #--------------------------------------------------------------------------
type: struct
desc: "Overclock properties"
class: $sOverclock
name: $s_overclock_properties_t
version: "1.5"
base: $s_base_properties_t
details:
    - "Information on the overclock domain type and all the contols that are part of the domain."
members:
    - type: $s_overclock_domain_t
      name: "domainType"
      desc: "[out] The hardware block that this overclock domain controls (GPU, VRAM, ...)"
    - type: uint32_t
      name: "AvailableControls"
      desc: "[out] Returns the overclock controls that are supported (a bit for each of enum $s_overclock_control_t). If no bits are set, the domain doesn't support overclocking."
    - type: $s_vf_program_type_t
      name: "VFProgramType"
      desc: "[out] Type of V-F curve programming that is permitted:."
    - type: uint32_t
      name: "NumberOfVFPoints"
      desc: "[out] Number of VF points that can be programmed - max_num_points"
--- #--------------------------------------------------------------------------
type: struct
desc: "Overclock Control properties"
class: $sOverclock
name: $s_control_property_t
version: "1.5"
details:
    - "Provides all the control capabilities supported by the device for the overclock domain."
members:
    - type: double
      name: "MinValue"
      desc: "[out]  This provides information about the limits of the control value so that the driver can calculate the set of valid values."
    - type: double
      name: "MaxValue"
      desc: "[out]  This provides information about the limits of the control value so that the driver can calculate the set of valid values."
    - type: double
      name: "StepValue"
      desc: "[out]  This provides information about the limits of the control value so that the driver can calculate the set of valid values."
    - type: double
      name: "RefValue"
      desc: "[out] The reference value provides the anchor point, UIs can combine this with the user offset request to show the anticipated improvement."
    - type: double
      name: "DefaultValue"
      desc: "[out] The shipped out-of-box position of this control. Driver can request this value at any time to return to the out-of-box behavior."
--- #--------------------------------------------------------------------------
type: struct
desc: "Overclock VF properties"
class: $sOverclock
name: $s_vf_property_t
version: "1.5"
details:
    - "Provides all the VF capabilities supported by the device for the overclock domain."
members:
    - type: double
      name: "MinFreq"
      desc: "[out] Read the minimum frequency that can be be programmed in the custom V-F point.."
    - type: double
      name: "MaxFreq"
      desc: "[out] Read the maximum frequency that can be be programmed in the custom V-F point.."
    - type: double
      name: "StepFreq"
      desc: "[out] Read the frequency step that can be be programmed in the custom V-F point.."
    - type: double
      name: "MinVolt"
      desc: "[out] Read the minimum voltage that can be be programmed in the custom V-F point.."
    - type: double
      name: "MaxVolt"
      desc: "[out] Read the maximum voltage that can be be programmed in the custom V-F point.."
    - type: double
      name: "StepVolt"
      desc: "[out] Read the voltage step that can be be programmed in the custom V-F point."
--- #--------------------------------------------------------------------------
type: function
desc: "Set the overclock waiver.The overclock waiver setting is persistent until the next pcode boot"
class: $sDevice
name: SetOverclockWaiver
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "This product does not support overclocking"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the list of supported overclock domains for this device"
class: $sDevice
name: GetOverclockDomains
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: uint32_t*
      name: pOverclockDomains
      desc: "[in,out] Returns the overclock domains that are supported (a bit for each of enum $s_overclock_domain_t). If no bits are set, the device doesn't support overclocking."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the list of supported overclock controls available for one of the supported overclock domains on the device"
class: $sDevice
name: GetOverclockControls
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_overclock_domain_t
      name: domainType
      desc: "[in] Domain type."
    - type: uint32_t*
      name: pAvailableControls
      desc: "[in,out] Returns the overclock controls that are supported for the specified overclock domain (a bit for each of enum $s_overclock_control_t)."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset all overclock settings to default values (shipped = 1 or manufacturing =0)"
class: $sDevice
name: ResetOverclockSettings
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $x_bool_t
      name: "onShippedState"
      desc: "[in] True will reset to shipped state; false will reset to manufacturing state"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Determine the state of overclocking"
class: $sDevice
name: ReadOverclockState
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_overclock_mode_t*
      name: "pOverclockMode"
      desc: "[out] One of overclock mode."
    - type: $x_bool_t*
      name: "pWaiverSetting"
      desc: "[out] Waiver setting: 0 = Waiver not set, 1 = waiver has been set."
    - type: $x_bool_t*
      name: "pOverclockState"
      desc: "[out] Current settings 0 =manufacturing state, 1= shipped state).."
    - type: $s_pending_action_t*
      name: "pPendingAction"
      desc: "[out] This enum is returned when the driver attempts to set an overclock control or reset overclock settings."
    - type: $x_bool_t*
      name: "pPendingReset"
      desc: "[out] Pending reset 0 =manufacturing state, 1= shipped state).."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Get handle of overclock domains"
class: $sDevice
name: EnumOverclockDomains
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of components of this type.
            if count is zero, then the driver shall update the value with the total number of components of this type that are available.
            if count is greater than the number of components of this type that are available, then the driver shall update the value with the correct number of components.
    - type: "$s_overclock_handle_t*"
      name: phDomainHandle
      desc: |
            [in,out][optional][range(0, *pCount)] array of handle of components of this type.
            if count is less than the number of components of this type that are available, then the driver shall only retrieve that number of component handles.
--- #--------------------------------------------------------------------------
type: function
desc: "Get overclock domain control properties"
class: $sOverclock
name: GetDomainProperties
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_overclock_properties_t*
      name: pDomainProperties
      desc: "[in,out] The overclock properties for the specified domain."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Read overclock VF min,max and step values"
class: $sOverclock
name: GetDomainVFProperties
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_vf_property_t*
      name: pVFProperties
      desc: "[in,out] The VF min,max,step for a specified domain."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Read overclock control values - min/max/step/default/ref"
class: $sOverclock
name: GetDomainControlProperties
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_overclock_control_t
      name: DomainControl
      desc: "[in] Handle for the component."
    - type: $s_control_property_t*
      name: pControlProperties
      desc: "[in,out] overclock control values."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Read the current value for a given overclock control"
class: $sOverclock
name: GetControlCurrentValue
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component."
    - type: $s_overclock_control_t
      name: DomainControl
      desc: "[in] Overclock Control."
    - type: double*
      name: pValue
      desc: "[in,out] Getting overclock control value for the specified control."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Read the the reset pending value for a given overclock control"
class: $sOverclock
name: GetControlPendingValue
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_overclock_control_t
      name: DomainControl
      desc: "[in] Overclock Control."
    - type: double*
      name: pValue
      desc: "[out] Returns the pending value for a given control. The units and format of the value depend on the control type."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------

type: function
desc: "Set the value for a given overclock control"
class: $sOverclock
name: SetControlUserValue
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_overclock_control_t
      name: DomainControl
      desc: "[in] Domain Control."
    - type: double
      name: pValue
      desc: "[in] The new value of the control. The units and format of the value depend on the control type."
    - type: $s_pending_action_t*
      name: pPendingAction
      desc: "[out] Pending overclock setting."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Determine the state of an overclock control"
class: $sOverclock
name: GetControlState
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_overclock_control_t
      name: DomainControl
      desc: "[in] Domain Control."
    - type: $s_control_state_t*
      name: pControlState
      desc: "[out] Current overclock control state."
    - type: $s_pending_action_t*
      name: pPendingAction
      desc: "[out] Pending overclock setting."
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Read the frequency or voltage of a V-F point from the default or custom V-F curve."
class: $sOverclock
name: GetVFPointValues
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_vf_type_t
      name: VFType
      desc: "[in] Voltage or Freqency point to read."
    - type: $s_vf_array_type_t
      name: VFArrayType
      desc: "[in] User,Default or Live VF array to read from"
    - type: uint32_t
      name: PointIndex
      desc: "[in] Point index - number between (0, max_num_points - 1)."
    - type: uint32_t*
      name: PointValue
      desc: "[out] Returns the frequency in 1kHz units or voltage in millivolt units from the custom V-F curve at the specified zero-based index "
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: function
desc: "Write the frequency or voltage of a V-F point to custom V-F curve."
class: $sOverclock
name: SetVFPointValues
version: "1.5"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_overclock_handle_t
      name: hDomainHandle
      desc: "[in] Handle for the component domain."
    - type: $s_vf_type_t
      name: VFType
      desc: "[in] Voltage or Freqency point to read."
    - type: uint32_t
      name: PointIndex
      desc: "[in] Point index - number between (0, max_num_points - 1)."
    - type: uint32_t
      name: PointValue
      desc: "[in] Writes frequency in 1kHz units or voltage in millivolt units to custom V-F curve at the specified zero-based index "
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "Overclocking is not supported on this control domain"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for a Sysman device overclock domain"
name: $sOverclock
version: "1.5"
owner: $sDevice
members:
    - type: $s_overclock_handle_t
      name: handle
      desc: "[in] handle of Sysman object" 
      init: nullptr
    - type: $sDevice*
      name: pDevice
      desc: "[in] pointer to owner object"