#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for System Resource Management (Sysman) - Firmware management"
--- #--------------------------------------------------------------------------
type: enum
desc: "RAS error type"
class: $sRas
name: $s_ras_error_type_t
etors:
    - name: CORRECTABLE
      value: "0"
      desc: "Errors were corrected by hardware"
    - name: UNCORRECTABLE
      desc: "Error were not corrected"
--- #--------------------------------------------------------------------------
type: enum
desc: "RAS error categories"
class: $sRas
name: $s_ras_error_cat_t
etors:
    - name: RESET
      value: "0"
      desc: "The number of accelerator engine resets attempted by the driver"
    - name: PROGRAMMING_ERRORS
      desc: "The number of hardware exceptions generated by the way workloads have programmed the hardware"
    - name: DRIVER_ERRORS
      desc: "The number of low level driver communication errors have occurred"
    - name: COMPUTE_ERRORS
      desc: "The number of errors that have occurred in the compute accelerator hardware"
    - name: NON_COMPUTE_ERRORS
      desc: "The number of errors that have occurred in the fixed-function accelerator hardware"
    - name: CACHE_ERRORS
      desc: "The number of errors that have occurred in caches (L1/L3/register file/shared local memory/sampler)"
    - name: DISPLAY_ERRORS
      desc: "The number of errors that have occurred in the display"
--- #--------------------------------------------------------------------------
type: macro
desc: "The maximum number of categories"
name: $S_MAX_RAS_ERROR_CATEGORY_COUNT
value: "7"
--- #--------------------------------------------------------------------------
type: struct
desc: "RAS properties"
class: $sRas
name: $s_ras_properties_t
base: $s_base_properties_t
members:
    - type: $s_ras_error_type_t
      name: "type"
      desc: "[out] The type of RAS error"
    - type: $x_bool_t
      name: "onSubdevice"
      desc: "[out] True if the resource is located on a sub-device; false means that the resource is on the device of the calling Sysman handle"
    - type: uint32_t
      name: "subdeviceId"
      desc: "[out] If onSubdevice is true, this gives the ID of the sub-device"
--- #--------------------------------------------------------------------------
type: struct
desc: "RAS error details"
class: $sRas
name: $s_ras_state_t
base: $s_base_state_t
members:
    - type: uint64_t
      name: "category[$S_MAX_RAS_ERROR_CATEGORY_COUNT]"
      desc: "[in][out] Breakdown of error by category"
--- #--------------------------------------------------------------------------
type: struct
desc: "RAS error configuration - thresholds used for triggering RAS events ($S_EVENT_TYPE_FLAG_RAS_CORRECTABLE_ERRORS, $S_EVENT_TYPE_FLAG_RAS_UNCORRECTABLE_ERRORS)"
class: $sRas
name: $s_ras_config_t
base: $s_base_config_t
details:
    - "The driver maintains a total counter which is updated every time a hardware block covered by the corresponding RAS error set notifies that an error has occurred. When this total count goes above the totalThreshold specified below, a RAS event is triggered."
    - "The driver also maintains a counter for each category of RAS error (see $s_ras_state_t for a breakdown). Each time a hardware block of that category notifies that an error has occurred, that corresponding category counter is updated. When it goes above the threshold specified in detailedThresholds, a RAS event is triggered."
members:
    - type: uint64_t
      name: "totalThreshold"
      desc: "[in,out] If the total RAS errors exceeds this threshold, the event will be triggered. A value of 0ULL disables triggering the event based on the total counter."
    - type: $s_ras_state_t
      name: detailedThresholds
      desc: "[in,out] If the RAS errors for each category exceed the threshold for that category, the event will be triggered. A value of 0ULL will disable an event being triggered for that category."
--- #--------------------------------------------------------------------------
type: function
desc: "Get handle of all RAS error sets on a device"
class: $sDevice
name: EnumRasErrorSets
details:
    - "A RAS error set is a collection of RAS error counters of a given type (correctable/uncorrectable) from hardware blocks contained within a sub-device or within the device."
    - "A device without sub-devices will typically return two handles, one for correctable errors sets and one for uncorrectable error sets."
    - "A device with sub-devices will return RAS error sets for each sub-device and possibly RAS error sets for hardware blocks outside the sub-devices."
    - "If the function completes successfully but pCount is set to 0, RAS features are not available/enabled on this device."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of components of this type.
            if count is zero, then the driver shall update the value with the total number of components of this type that are available.
            if count is greater than the number of components of this type that are available, then the driver shall update the value with the correct number of components.
    - type: "$s_ras_handle_t*"
      name: phRas
      desc: |
            [in,out][optional][range(0, *pCount)] array of handle of components of this type.
            if count is less than the number of components of this type that are available, then the driver shall only retrieve that number of component handles.
--- #--------------------------------------------------------------------------
type: function
desc: "Get RAS properties of a given RAS error set - this enables discovery of the type of RAS error set (correctable/uncorrectable) and if located on a sub-device"
class: $sRas
name: GetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_ras_handle_t
      name: hRas
      desc: "[in] Handle for the component."
    - type: $s_ras_properties_t*
      name: pProperties
      desc: "[in,out] Structure describing RAS properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Get RAS error thresholds that control when RAS events are generated"
class: $sRas
name: GetConfig
details:
    - "The driver maintains counters for all RAS error sets and error categories. Events are generated when errors occur. The configuration enables setting thresholds to limit when events are sent."
    - "When a particular RAS correctable error counter exceeds the configured threshold, the event $S_EVENT_TYPE_FLAG_RAS_CORRECTABLE_ERRORS will be triggered."
    - "When a particular RAS uncorrectable error counter exceeds the configured threshold, the event $S_EVENT_TYPE_FLAG_RAS_UNCORRECTABLE_ERRORS will be triggered."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_ras_handle_t
      name: hRas
      desc: "[in] Handle for the component."
    - type: "$s_ras_config_t*"
      name: pConfig
      desc: "[in,out] Will be populed with the current RAS configuration - thresholds used to trigger events"
--- #--------------------------------------------------------------------------
type: function
desc: "Set RAS error thresholds that control when RAS events are generated"
class: $sRas
name: SetConfig
details:
    - "The driver maintains counters for all RAS error sets and error categories. Events are generated when errors occur. The configuration enables setting thresholds to limit when events are sent."
    - "When a particular RAS correctable error counter exceeds the specified threshold, the event $S_EVENT_TYPE_FLAG_RAS_CORRECTABLE_ERRORS will be generated."
    - "When a particular RAS uncorrectable error counter exceeds the specified threshold, the event $S_EVENT_TYPE_FLAG_RAS_UNCORRECTABLE_ERRORS will be generated."
    - "Call $sRasGetState() and set the clear flag to true to restart event generation once counters have exceeded thresholds."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_ras_handle_t
      name: hRas
      desc: "[in] Handle for the component."
    - type: "const $s_ras_config_t*"
      name: pConfig
      desc: "[in] Change the RAS configuration - thresholds used to trigger events"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "Another running process is controlling these settings."
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "Don't have permissions to set thresholds."
--- #--------------------------------------------------------------------------
type: function
desc: "Get the current value of RAS error counters for a particular error set"
class: $sRas
name: GetState
details:
    - "Clearing errors will affect other threads/applications - the counter values will start from zero."
    - "Clearing errors requires write permissions."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_ras_handle_t
      name: hRas
      desc: "[in] Handle for the component."
    - type: $x_bool_t
      name: clear
      desc: "[in] Set to 1 to clear the counters of this type"
    - type: $s_ras_state_t*
      name: pState
      desc: "[in,out] Breakdown of where errors have occurred"
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "Don't have permissions to clear error counters."
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for a Sysman device RAS error set"
name: $sRas
owner: $sDevice
members:
    - type: $s_ras_handle_t
      name: handle
      desc: "[in] handle of Sysman object" 
      init: nullptr
    - type: $sDevice*
      name: pDevice
      desc: "[in] pointer to owner object"