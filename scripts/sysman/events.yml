#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for System Resource Management (Sysman) - Event management"
--- #--------------------------------------------------------------------------
type: enum
desc: "Event types"
class: $sDriver
name: $s_event_type_flags_t
etors:
    - name: DEVICE_DETACH
      desc: "Event is triggered when the device is no longer available (due to a reset or being disabled)."
    - name: DEVICE_ATTACH
      desc: "Event is triggered after the device is available again."
    - name: DEVICE_SLEEP_STATE_ENTER
      desc: "Event is triggered when the driver is about to put the device into a deep sleep state"
    - name: DEVICE_SLEEP_STATE_EXIT
      desc: "Event is triggered when the driver is waking the device up from a deep sleep state"
    - name: FREQ_THROTTLED
      desc: "Event is triggered when the frequency starts being throttled"
    - name: ENERGY_THRESHOLD_CROSSED
      desc: "Event is triggered when the energy consumption threshold is reached (use $sPowerSetEnergyThreshold() to configure)."
    - name: TEMP_CRITICAL
      desc: "Event is triggered when the critical temperature is reached (use $sTemperatureSetConfig() to configure - disabled by default)."
    - name: TEMP_THRESHOLD1
      desc: "Event is triggered when the temperature crosses threshold 1 (use $sTemperatureSetConfig() to configure - disabled by default)."
    - name: TEMP_THRESHOLD2
      desc: "Event is triggered when the temperature crosses threshold 2 (use $sTemperatureSetConfig() to configure - disabled by default)."
    - name: MEM_HEALTH
      desc: "Event is triggered when the health of device memory changes."
    - name: FABRIC_PORT_HEALTH
      desc: "Event is triggered when the health of fabric ports change."
    - name: PCI_LINK_HEALTH
      desc: "Event is triggered when the health of the PCI link changes."
    - name: RAS_CORRECTABLE_ERRORS
      desc: "Event is triggered when accelerator RAS correctable errors cross thresholds (use $sRasSetConfig() to configure - disabled by default)."
    - name: RAS_UNCORRECTABLE_ERRORS
      desc: "Event is triggered when accelerator RAS uncorrectable errors cross thresholds (use $sRasSetConfig() to configure - disabled by default)."
    - name: DEVICE_RESET_REQUIRED
      desc: "Event is triggered when the device needs to be reset (use $sDeviceGetState() to determine the reasons for the reset)."
    - name: SURVIVABILITY_MODE_DETECTED
      desc: "Event is triggered when graphics driver encounter an error condition."
      version: "1.9"
--- #--------------------------------------------------------------------------
type: function
desc: "Specify the list of events to listen to for a given device"
class: $sDevice
name: EventRegister
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] The device handle."
    - type: $s_event_type_flags_t
      name: events
      desc: "[in] List of events to listen to."
--- #--------------------------------------------------------------------------
type: function
desc: "Wait for events to be received from a one or more devices."
class: $sDriver
decl: static
name: EventListen
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: uint32_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in milliseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then will check status and return immediately;
            if `UINT32_MAX`, then function will not return until events arrive.
    - type: uint32_t
      name: count
      desc: "[in] Number of device handles in phDevices."
    - type: "$s_device_handle_t*"
      name: phDevices
      desc: "[in][range(0, count)] Device handles to listen to for events. Only devices from the provided driver handle can be specified in this list."
    - type: uint32_t*
      name: pNumDeviceEvents
      desc: "[in,out] Will contain the actual number of devices in phDevices that generated events. If non-zero, check pEvents to determine the devices and events that were received."
    - type: "$s_event_type_flags_t*"
      name: pEvents
      desc: |
            [in,out] An array that will continue the list of events for each device listened in phDevices.
            This array must be at least as big as count.
            For every device handle in phDevices, this will provide the events that occurred for that device at the same position in this array. If no event was received for a given device, the corresponding array entry will be zero.
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to listen to events."
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "One or more of the supplied device handles belongs to a different driver."
--- #--------------------------------------------------------------------------
type: function
desc: "Wait for events to be received from a one or more devices."
version: "1.1"
class: $sDriver
decl: static
name: EventListenEx
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: uint64_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in milliseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then will check status and return immediately;
            if `UINT64_MAX`, then function will not return until events arrive.
    - type: uint32_t
      name: count
      desc: "[in] Number of device handles in phDevices."
    - type: "$s_device_handle_t*"
      name: phDevices
      desc: "[in][range(0, count)] Device handles to listen to for events. Only devices from the provided driver handle can be specified in this list."
    - type: uint32_t*
      name: pNumDeviceEvents
      desc: "[in,out] Will contain the actual number of devices in phDevices that generated events. If non-zero, check pEvents to determine the devices and events that were received."
    - type: "$s_event_type_flags_t*"
      name: pEvents
      desc: |
            [in,out] An array that will continue the list of events for each device listened in phDevices.
            This array must be at least as big as count.
            For every device handle in phDevices, this will provide the events that occurred for that device at the same position in this array. If no event was received for a given device, the corresponding array entry will be zero.
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to listen to events."
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "One or more of the supplied device handles belongs to a different driver."