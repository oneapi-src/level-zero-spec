#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for Program Debug"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device debug property flags"
class: $tDevice
name: $t_device_debug_property_flags_t
etors:
    - name: ATTACH
      desc: "the device supports attaching for debug"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device debug properties queried using $tDeviceGetDebugProperties."
class: $tDevice
name: $t_device_debug_properties_t
base: $t_base_properties_t
members:
    - type: $t_device_debug_property_flags_t
      name: flags
      desc: "[out] returns 0 (none) or a valid combination of $t_device_debug_property_flag_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves debug properties of the device."
class: $tDevice
name: GetDebugProperties
params:
    - type: $t_device_handle_t
      name: hDevice
      desc: "[in] device handle"
    - type: "$t_device_debug_properties_t*"
      name: pDebugProperties
      desc: "[in,out] query result for debug properties"
--- #--------------------------------------------------------------------------
type: struct
desc: "Debug configuration provided to $tDebugAttach"
class: $tDebug
name: $t_debug_config_t
members:
    - type: uint32_t
      name: pid
      desc: "[in] the host process identifier"
--- #--------------------------------------------------------------------------
type: function
desc: "Attach to a device."
class: $tDebug
name: Attach
decl: static
details:
    - "The device must be enabled for debug; see $xsSchedulerSetComputeUnitDebugMode."
params:
    - type: $t_device_handle_t
      name: hDevice
      desc: "[in] device handle"
    - type: "const $t_debug_config_t*"
      name: config
      desc: "[in] the debug configuration"
    - type: "$t_debug_session_handle_t*"
      name: phDebug
      desc: "[out] debug session handle"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_FEATURE:
        - "attaching to this device is not supported"
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "caller does not have sufficient permissions"
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "a debugger is already attached"
--- #--------------------------------------------------------------------------
type: function
desc: "Close a debug session."
class: $tDebug
name: Detach
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in][release] debug session handle"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported debug event flags."
class: $tDebug
name: $t_debug_event_flags_t
etors:
    - name: NEED_ACK
      desc: "The event needs to be acknowledged by calling $tDebugAcknowledgeEvent."
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported debug event types."
class: $tDebug
name: $t_debug_event_type_t
etors:
    - name: INVALID
      desc: "The event is invalid"
      value: "0"
    - name: DETACHED
      desc: "The tool was detached"
    - name: PROCESS_ENTRY
      desc: "The debuggee process created command queues on the device"
    - name: PROCESS_EXIT
      desc: "The debuggee process destroyed all command queues on the device"
    - name: MODULE_LOAD
      desc: "An in-memory module was loaded onto the device"
    - name: MODULE_UNLOAD
      desc: "An in-memory module is about to get unloaded from the device"
    - name: THREAD_STOPPED
      desc: "The thread stopped due to a device exception"
    - name: THREAD_UNAVAILABLE
      desc: "The thread is not available to be stopped"
    - name: PAGE_FAULT
      desc: "A page request could not be completed on the device"
      version: "1.1"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported debug detach reasons."
class: $tDebug
name: $t_debug_detach_reason_t
etors:
    - name: INVALID
      desc: "The detach reason is not valid"
      value: "0"
    - name: HOST_EXIT
      desc: "The host process exited"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_TYPE_DETACHED"
class: $tDebug
name: $t_debug_event_info_detached_t
members:
    - type: $t_debug_detach_reason_t
      name: reason
      desc: "[out] the detach reason"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_TYPE_MODULE_LOAD and $T_DEBUG_EVENT_TYPE_MODULE_UNLOAD"
class: $tDebug
name: $t_debug_event_info_module_t
members:
    - type: $t_module_debug_info_format_t
      name: format
      desc: "[out] the module format"
    - type: uint64_t
      name: moduleBegin
      desc: "[out] the begin address of the in-memory module (inclusive)"
    - type: uint64_t
      name: moduleEnd
      desc: "[out] the end address of the in-memory module (exclusive)"
    - type: uint64_t
      name: load
      desc: "[out] the load address of the module on the device"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_TYPE_THREAD_STOPPED and $T_DEBUG_EVENT_TYPE_THREAD_UNAVAILABLE"
class: $tDebug
name: $t_debug_event_info_thread_stopped_t
members:
    - type: $x_device_thread_t
      name: thread
      desc: "[out] the stopped/unavailable thread"
--- #--------------------------------------------------------------------------
type: enum
desc: "Page fault reasons."
class: $tDebug
name: $t_debug_page_fault_reason_t
version: "1.1"
etors:
    - name: INVALID
      desc: "The page fault reason is not valid"
      value: "0"
    - name: MAPPING_ERROR
      desc: "The address is not mapped"
    - name: PERMISSION_ERROR
      desc: "Invalid access permissions"
--- #--------------------------------------------------------------------------
type: struct
desc: "Event information for $T_DEBUG_EVENT_TYPE_PAGE_FAULT"
class: $tDebug
name: $t_debug_event_info_page_fault_t
version: "1.1"
members:
    - type: uint64_t
      name: address
      desc: "[out] the faulting address"
    - type: uint64_t
      name: mask
      desc: "[out] the alignment mask"
    - type: $t_debug_page_fault_reason_t
      name: reason
      desc: "[out] the page fault reason"
--- #--------------------------------------------------------------------------
type: union
desc: "Event type-specific information"
class: $tDebug
name: $t_debug_event_info_t
members:
    - type: $t_debug_event_info_detached_t
      name: detached
      desc: "[out] type == $T_DEBUG_EVENT_TYPE_DETACHED"
    - type: $t_debug_event_info_module_t
      name: module
      desc: "[out] type == $T_DEBUG_EVENT_TYPE_MODULE_LOAD or $T_DEBUG_EVENT_TYPE_MODULE_UNLOAD"
    - type: $t_debug_event_info_thread_stopped_t
      name: thread
      desc: "[out] type == $T_DEBUG_EVENT_TYPE_THREAD_STOPPED or $T_DEBUG_EVENT_TYPE_THREAD_UNAVAILABLE"
    - type: $t_debug_event_info_page_fault_t
      name: page_fault
      desc: "[out] type == $T_DEBUG_EVENT_TYPE_PAGE_FAULT"
      version: "1.1"
--- #--------------------------------------------------------------------------
type: struct
desc: "A debug event on the device."
class: $tDebug
name: $t_debug_event_t
members:
    - type: $t_debug_event_type_t
      name: type
      desc: "[out] the event type"
    - type: $t_debug_event_flags_t
      name: flags
      desc: "[out] returns 0 (none) or a combination of $t_debug_event_flag_t"
    - type: $t_debug_event_info_t
      name: info
      desc: "[out] event type specific information"
--- #--------------------------------------------------------------------------
type: function
desc: "Read the topmost debug event."
class: $tDebug
name: ReadEvent
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: uint64_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in milliseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then immediately returns the status of the event;
            if UINT64_MAX, then function will not return until complete or device is lost.
            Due to external dependencies, timeout may be rounded to the closest value allowed by the accuracy of those dependencies.
    - type: "$t_debug_event_t*"
      name: event
      desc: "[in,out] a pointer to a $t_debug_event_t."
returns:
    - $X_RESULT_NOT_READY:
        - "the timeout expired"
--- #--------------------------------------------------------------------------
type: function
desc: "Acknowledge a debug event."
class: $tDebug
name: AcknowledgeEvent
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: "const $t_debug_event_t*"
      name: event
      desc: "[in] a pointer to a $t_debug_event_t."
--- #--------------------------------------------------------------------------
type: function
desc: "Interrupt device threads."
class: $tDebug
name: Interrupt
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread to interrupt"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is already stopped or unavailable"
--- #--------------------------------------------------------------------------
type: function
desc: "Resume device threads."
class: $tDebug
name: Resume
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread to resume"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is already running or unavailable"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device memory space types."
class: $tDebug
name: $t_debug_memory_space_type_t
etors:
    - name: DEFAULT
      desc: "default memory space (attribute may be omitted)"
      value: "0"
    - name: SLM
      desc: "shared local memory space (GPU-only)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device memory space descriptor"
class: $tDebug
name: $t_debug_memory_space_desc_t
base: $t_base_desc_t
members:
    - type: $t_debug_memory_space_type_t
      name: type
      desc: "[in] type of memory space"
    - type: uint64_t
      name: address
      desc: "[in] the virtual address within the memory space"
--- #--------------------------------------------------------------------------
type: function
desc: "Read memory."
class: $tDebug
name: ReadMemory
details:
    - "The thread identifier 'all' can be used for accessing the default memory space, e.g. for setting breakpoints."
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread identifier."
    - type: "const $t_debug_memory_space_desc_t*"
      name: desc
      desc: "[in] memory space descriptor"
    - type: size_t
      name: size
      desc: "[in] the number of bytes to read"
    - type: "void*"
      name: buffer
      desc: "[in,out] a buffer to hold a copy of the memory"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is running or unavailable"
        - "the memory cannot be accessed from the supplied thread"
--- #--------------------------------------------------------------------------
type: function
desc: "Write memory."
class: $tDebug
name: WriteMemory
details:
    - "The thread identifier 'all' can be used for accessing the default memory space, e.g. for setting breakpoints."
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread identifier."
    - type: "const $t_debug_memory_space_desc_t*"
      name: desc
      desc: "[in] memory space descriptor"
    - type: size_t
      name: size
      desc: "[in] the number of bytes to write"
    - type: "const void*"
      name: buffer
      desc: "[in] a buffer holding the pattern to write"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is running or unavailable"
        - "the memory cannot be accessed from the supplied thread"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported general register set flags."
class: $tDebug
name: $t_debug_regset_flags_t
etors:
    - name: READABLE
      desc: "register set is readable"
    - name: WRITEABLE
      desc: "register set is writeable"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device register set properties queried using $tDebugGetRegisterSetProperties."
class: $tDebug
name: $t_debug_regset_properties_t
base: $t_base_properties_t
members:
    - type: uint32_t
      name: type
      desc: "[out] device-specific register set type"
    - type: uint32_t
      name: version
      desc: "[out] device-specific version of this register set"
    - type: $t_debug_regset_flags_t
      name: generalFlags
      desc: "[out] general register set flags"
    - type: uint32_t
      name: deviceFlags
      desc: "[out] device-specific register set flags"
    - type: uint32_t
      name: count
      desc: "[out] number of registers in the set"
    - type: uint32_t
      name: bitSize
      desc: "[out] the size of a register in bits"
    - type: uint32_t
      name: byteSize
      desc: "[out] the size required for reading or writing a register in bytes"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves debug register set properties."
class: $tDebug
name: GetRegisterSetProperties
decl: static
params:
    - type: $t_device_handle_t
      name: hDevice
      desc: "[in] device handle"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of register set properties.
            if count is zero, then the driver shall update the value with the total number of register set properties available.
            if count is greater than the number of register set properties available, then the driver shall update the value with the correct number of registry set properties available.
    - type: "$t_debug_regset_properties_t*"
      name: pRegisterSetProperties
      desc: |
            [in,out][optional][range(0, *pCount)] array of query results for register set properties.
            if count is less than the number of register set properties available, then driver shall only retrieve that number of register set properties.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves debug register set properties for a given thread."
class: $tDebug
name: GetThreadRegisterSetProperties
decl: static
version: "1.5"
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread identifier specifying a single stopped thread"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of register set properties.
            if count is zero, then the driver shall update the value with the total number of register set properties available.
            if count is greater than the number of register set properties available, then the driver shall update the value with the correct number of registry set properties available.
    - type: "$t_debug_regset_properties_t*"
      name: pRegisterSetProperties
      desc: |
            [in,out][optional][range(0, *pCount)] array of query results for register set properties.
            if count is less than the number of register set properties available, then driver shall only retrieve that number of register set properties.
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is running or unavailable"
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "the thread argument specifies more than one or a non-existant thread"
--- #--------------------------------------------------------------------------
type: function
desc: "Read register state."
class: $tDebug
name: ReadRegisters
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread identifier"
    - type: uint32_t
      name: type
      desc: "[in] register set type"
    - type: uint32_t
      name: start
      desc: "[in] the starting offset into the register state area; must be less than $t_debug_regset_properties_t.count for the type"
    - type: uint32_t
      name: count
      desc: "[in] the number of registers to read; start+count must be <= zet_debug_register_group_properties_t.count for the type"
    - type: "void*"
      name: pRegisterValues
      desc: "[in,out][optional][range(0, count)] buffer of register values"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is running or unavailable"
--- #--------------------------------------------------------------------------
type: function
desc: "Write register state."
class: $tDebug
name: WriteRegisters
params:
    - type: $t_debug_session_handle_t
      name: hDebug
      desc: "[in] debug session handle"
    - type: $x_device_thread_t
      name: thread
      desc: "[in] the thread identifier"
    - type: uint32_t
      name: type
      desc: "[in] register set type"
    - type: uint32_t
      name: start
      desc: "[in] the starting offset into the register state area; must be less than $t_debug_regset_properties_t.count for the type"
    - type: uint32_t
      name: count
      desc: "[in] the number of registers to write; start+count must be <= zet_debug_register_group_properties_t.count for the type"
    - type: "void*"
      name: pRegisterValues
      desc: "[in,out][optional][range(0, count)] buffer of register values"
returns:
    - $X_RESULT_ERROR_NOT_AVAILABLE:
        - "the thread is running or unavailable"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for Debug API"
name: $tDebug
members:
    - type: "$t_debug_session_handle_t"
      name: handle
      desc: "[in] debug session handle"
