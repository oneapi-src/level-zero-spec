#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Fence"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported fence creation flags"
class: $xFence
name: $x_fence_flags_t
etors:
    - name: SIGNALED
      desc: "fence is created in the signaled state, otherwise not signaled."
--- #--------------------------------------------------------------------------
type: struct
desc: "Fence descriptor"
class: $xFence
name: $x_fence_desc_t
base: $x_base_desc_t
members:
    - type: $x_fence_flags_t
      name: flags
      desc: |
            [in] creation flags.
            must be 0 (default) or a valid combination of $x_fence_flag_t.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a fence for the command queue."
class: $xFence
name: Create
decl: static
ordinal: "0"
analogue:
    - "**vkCreateFence**"
details:
    - "A fence is a heavyweight synchronization primitive used to communicate to the host that command list execution has completed."
    - "The application must only use the fence for the command queue which was provided during creation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_command_queue_handle_t
      name: hCommandQueue
      desc: "[in] handle of command queue"
    - type: "const $x_fence_desc_t*"
      name: desc
      desc: "[in] pointer to fence descriptor"
    - type: "$x_fence_handle_t*"
      name: phFence
      desc: "[out] pointer to handle of fence object created"
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes a fence object."
class: $xFence
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the fence before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this fence."
    - "The application must **not** call this function from simultaneous threads with the same fence handle."
    - "The implementation of this function must be thread-safe."
analogue:
    - "**vkDestroyFence**"
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in][release] handle of fence object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "The current host thread waits on a fence to be signaled."
class: $xFence
name: HostSynchronize
analogue:
    - "**vkWaitForFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
    - type: uint64_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in nanoseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then operates exactly like $xFenceQueryStatus;
            if `UINT64_MAX`, then function will not return until complete or device is lost.
            Due to external dependencies, timeout may be rounded to the closest value allowed by the accuracy of those dependencies.
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
       - "timeout expired"
--- #--------------------------------------------------------------------------
type: function
desc: "Queries a fence object's status."
class: $xFence
name: QueryStatus
analogue:
    - "**vkGetFenceStatus**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_NOT_READY:
        - not signaled
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a fence back to the not signaled state."
class: $xFence
name: Reset
analogue:
    - "**vkResetFences**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_fence_handle_t
      name: hFence
      desc: "[in] handle of the fence"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for fence"
name: $xFence
owner: $xCommandQueue
members:
    - type: $x_fence_handle_t
      name: handle
      desc: "[in] handle of fence object"
    - type: $xCommandQueue*
      name: pCommandQueue
      desc: "[in] pointer to owner object"
    - type: $x_fence_desc_t
      name: desc
      desc: "[in] descriptor of the fence object"
