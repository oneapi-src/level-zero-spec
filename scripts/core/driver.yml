#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs"
ordinal: "1"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported initialization flags"
class: $x
name: $x_init_flags_t
etors:
    - name: GPU_ONLY
      desc: "only initialize GPU drivers"
    - name: VPU_ONLY
      desc: "only initialize VPU drivers"
--- #--------------------------------------------------------------------------
type: function
desc: "Initialize the $OneApi driver(s)"
class: $x
name: Init
decl: static
ordinal: "0"
details: 
    - "The application must call this function before calling any other function."
    - "If this function is not called then all other functions will return $X_RESULT_ERROR_UNINITIALIZED."
    - "Only one instance of each driver will be initialized per process."
    - "The application may call this function multiple times with different flags or environment variables enabled."
    - "The application must call this function after forking new processes. Each forked process must call this function."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe for scenarios where multiple libraries may initialize the driver(s) simultaneously."
params:
    - type: $x_init_flags_t
      name: flags
      desc: |
            [in] initialization flags.
            must be 0 (default) or a combination of $x_init_flag_t.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves driver instances"
class: $xDriver
name: Get
decl: static
ordinal: "0"
analogue:
    - clGetPlatformIDs
details:
    - "A driver represents a collection of physical devices."
    - "Multiple calls to this function will return identical driver handles, in the same order."
    - "The application may pass nullptr for pDrivers when only querying the number of drivers."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of driver instances.
            if count is zero, then the loader shall update the value with the total number of drivers available.
            if count is greater than the number of drivers available, then the loader shall update the value with the correct number of drivers available.
    - type: "$x_driver_handle_t*"
      name: phDrivers
      desc: |
            [in,out][optional][range(0, *pCount)] array of driver instance handles.
            if count is less than the number of drivers available, then the loader shall only retrieve that number of drivers.
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported API versions"
class: $xDriver
name: $x_api_version_t
details:
    - "API versions contain major and minor attributes, use $X_MAJOR_VERSION and $X_MINOR_VERSION"
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
    - name: "1_1"
      value: "$X_MAKE_VERSION( 1, 1 )"
      desc: "version 1.1"
      version: "1.1"
    - name: "1_2"
      value: "$X_MAKE_VERSION( 1, 2 )"
      desc: "version 1.2"
      version: "1.2"
    - name: "1_3"
      value: "$X_MAKE_VERSION( 1, 3 )"
      desc: "version 1.3"
      version: "1.3"
    - name: "1_4"
      value: "$X_MAKE_VERSION( 1, 4 )"
      desc: "version 1.4"
      version: "1.4"
    - name: "1_5"
      value: "$X_MAKE_VERSION( 1, 5 )"
      desc: "version 1.5"
      version: "1.5"  
    - name: "1_6"
      value: "$X_MAKE_VERSION( 1, 6 )"
      desc: "version 1.6"
      version: "1.6"
    - name: "1_7"
      value: "$X_MAKE_VERSION( 1, 7 )"
      desc: "version 1.7"
      version: "1.7"
    - name: "1_8"
      value: "$X_MAKE_VERSION( 1, 8 )"
      desc: "version 1.8"
      version: "1.8"
--- #--------------------------------------------------------------------------
type: function
desc: "Returns the API version supported by the specified driver"
class: $xDriver
name: GetApiVersion
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_api_version_t*"
      name: version
      desc: "[out] api version"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum driver universal unique id (UUID) size in bytes"
name: $X_MAX_DRIVER_UUID_SIZE
value: "16"
--- #--------------------------------------------------------------------------
type: struct
desc: "Driver universal unique id (UUID)"
name: "$x_driver_uuid_t"
members:
    - type: uint8_t
      name: "id[$X_MAX_DRIVER_UUID_SIZE]"
      desc: "[out] opaque data representing a driver UUID"
--- #--------------------------------------------------------------------------
type: struct
desc: "Driver properties queried using $xDriverGetProperties"
class: $xDriver
name: $x_driver_properties_t
base: $x_base_properties_t
members:
    - type: $x_driver_uuid_t
      name: uuid
      desc: "[out] universal unique identifier."
    - type: uint32_t
      name: driverVersion
      desc: |
        [out] driver version
        The driver version is a non-zero, monotonically increasing value where higher values always indicate a more recent version.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves properties of the driver."
class: $xDriver
name: GetProperties
ordinal: "1"
analogue:
    - "**clGetPlatformInfo**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_driver_properties_t*"
      name: pDriverProperties
      desc: "[in,out] query result for driver properties"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported IPC property flags"
class: $xDriver
name: $x_ipc_property_flags_t
etors:
    - name: MEMORY
      desc: "Supports passing memory allocations between processes. See $xMemGetIpcHandle."
    - name: EVENT_POOL
      desc: "Supports passing event pools between processes. See $xEventPoolGetIpcHandle."
--- #--------------------------------------------------------------------------
type: struct
desc: "IPC properties queried using $xDriverGetIpcProperties"
class: $xDriver
name: $x_driver_ipc_properties_t
base: $x_base_properties_t
members:
    - type: $x_ipc_property_flags_t
      name: flags
      desc: "[out] 0 (none) or a valid combination of $x_ipc_property_flag_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves IPC attributes of the driver"
class: $xDriver
name: GetIpcProperties
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "$x_driver_ipc_properties_t*"
      name: pIpcProperties
      desc: "[in,out] query result for IPC properties"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum extension name string size"
name: $X_MAX_EXTENSION_NAME
value: "256"
--- #--------------------------------------------------------------------------
type: struct
desc: "Extension properties queried using $xDriverGetExtensionProperties"
class: $xDriver
name: $x_driver_extension_properties_t
members:
    - type: char
      name: "name[$X_MAX_EXTENSION_NAME]"
      desc: "[out] extension name"
    - type: uint32_t
      name: version
      desc: "[out] extension version using $X_MAKE_VERSION"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves extension properties"
class: $xDriver
name: GetExtensionProperties
analogue:
    - "**vkEnumerateInstanceExtensionProperties**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of extension properties.
            if count is zero, then the driver shall update the value with the total number of extension properties available.
            if count is greater than the number of extension properties available, then the driver shall update the value with the correct number of extension properties available.
    - type: "$x_driver_extension_properties_t*"
      name: pExtensionProperties
      desc: |
            [in,out][optional][range(0, *pCount)] array of query results for extension properties.
            if count is less than the number of extension properties available, then driver shall only retrieve that number of extension properties.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves function pointer for vendor-specific or experimental extensions"
version: "1.1"
class: $xDriver
name: GetExtensionFunctionAddress
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const char*"
      name: name
      desc: "[in] extension function name"
    - type: "void**"
      name: ppFunctionAddress
      desc: "[out] pointer to function pointer"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for a driver instance handle"
name: $xDriver
attribute: singleton
members:
    - type: $x_driver_handle_t
      name: handle
      desc: "[in] handle of the driver instance"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves a string describing the last error code returned by the driver in the current thread."
version: "1.6"
class: $xDriver
name: GetLastErrorDescription
details:
    - "String returned is thread local."
    - "String is only updated on calls returning an error, i.e., not on calls returning $X_RESULT_SUCCESS."
    - "String may be empty if driver considers error code is already explicit enough to describe cause."
    - "Memory pointed to by ppString is owned by the driver."
    - "String returned is null-terminated."
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of the driver instance"
    - type: "const char**"
      name: ppString
      desc: "[in,out] pointer to a null-terminated array of characters describing cause of error."
