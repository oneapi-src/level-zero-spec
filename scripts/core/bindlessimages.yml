#
# Copyright (C) 2024 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Extension for supporting bindless images."
version: "1.9"
--- #--------------------------------------------------------------------------
type: macro
desc: "Image Memory Properties Extension Name"
version: "1.9"
name: $X_BINDLESS_IMAGE_EXP_NAME
value: '"$X_experimental_bindless_image"'
--- #--------------------------------------------------------------------------
type: enum
desc: "Bindless Image Extension Version(s)"
version: "1.9"
name: $x_bindless_image_exp_version_t
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Image flags for Bindless images"
class: $xImage
name: $x_image_bindless_exp_flags_t
version: "1.9"
etors:
    - name: BINDLESS
      desc: "Bindless images are created with $xImageCreate. The image handle created with this flag is valid on both host and device."
--- #--------------------------------------------------------------------------
type: struct
desc: "Image descriptor for bindless images. This structure may be passed to $xImageCreate via pNext member of $x_image_desc_t."
class: $xImage
version: "1.9"
name: $x_image_bindless_exp_desc_t
base: $x_base_desc_t
members:
    - type: $x_image_bindless_exp_flags_t
      name: flags
      desc: |
            [in] image flags.
            must be 0 (default) or a valid value of $x_image_bindless_exp_flag_t
            default behavior is bindless images are not used when creating handles via $xImageCreate.
            When the flag is passed to $xImageCreate, then only the memory for the image is allocated.
            Additional image handles can be created with $xImageViewCreateExt.
      init: "0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image descriptor for bindless images created from pitched allocations. This structure may be passed to $xImageCreate via pNext member of $x_image_desc_t."
class: $xImage
version: "1.9"
name: $x_image_pitched_exp_desc_t
base: $x_base_desc_t
members:
    - type: void*
      name: ptr
      desc: |
            [in] pointer to pitched device allocation allocated using $xMemAllocDevice
      init: "0"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device specific properties for pitched allocations"
version: "1.9"
class: $xDevice
name: $x_device_pitched_alloc_exp_properties_t
base: $x_base_properties_t
members:
    - type: size_t
      name: maxImageLinearWidth 
      desc: "[out] Maximum image linear width."
    - type: size_t
      name: maxImageLinearHeight 
      desc: "[out] Maximum image linear height."
details:
    - "This structure may be passed to $xDeviceGetImageProperties via the pNext member of $x_device_image_properties_t."
--- #--------------------------------------------------------------------------
type: function
desc: "Allocate pitched USM memory for images"
version: "1.9"
class: $xMem
name: GetPitchFor2dImage
decl: static
details:
    - "Retrieves pitch for 2D image given the width, height and size in bytes"
    - |
      The memory is then allocated using $xMemAllocDevice by providing input size calculated as the returned pitch value multiplied by image height
    - |
      The application may call this function from simultaneous threads
    - |
      The implementation of this function must be thread-safe.
    - |
      The implementation of this function should be lock-free.
    - |
      The implementation must support ::ZE_experimental_bindless_image extension.
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: "size_t"
      name: imageWidth
      desc: "[in] imageWidth"
    - type: "size_t"
      name: imageHeight
      desc: "[in] imageHeight"
    - type: "unsigned int"
      name: elementSizeInBytes
      desc: "[in] Element size in bytes"
    - type: "size_t *"
      name: rowPitch
      desc: "[out] rowPitch"
--- #--------------------------------------------------------------------------
type: function
desc: "Get bindless device offset for image"
version: "1.9"
class: $xImage
name: GetDeviceOffsetExp
decl: static
details:
    - "The application may call this function from simultaneous threads"
    - "The implementation of this function must be thread-safe."
    - "The implementation of this function should be lock-free."
    - "The implementation must support ::ZE_experimental_bindless_image extension."
params:
    - type: $x_image_handle_t
      name: hImage
      desc: "[in] handle of the image"
    - type: "uint64_t*"
      name: pDeviceOffset
      desc: "[out] bindless device offset for image"
