#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Copies"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies host, device, or shared memory."
class: $xCommandList
name: AppendMemoryCopy
details:
    - "The application must ensure the memory pointed to by dstptr and srcptr is accessible by the device on which the command list was created."
    - "The implementation must not access the memory pointed to by dstptr and srcptr as they are free to be modified by either the Host or device up until execution."
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
analogue:
    - "**clEnqueueCopyBuffer**"
    - "**clEnqueueReadBuffer**"
    - "**clEnqueueWriteBuffer**"
    - "**clEnqueueSVMMemcpy**"
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: dstptr
      desc: "[in] pointer to destination memory to copy to"
    - type: "const void*"
      name: srcptr
      desc: "[in] pointer to source memory to copy from"
    - type: size_t
      name: size
      desc: "[in] size in bytes to copy"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Initializes host, device, or shared memory."
class: $xCommandList
name: AppendMemoryFill
details:
    - "The application must ensure the memory pointed to by dstptr is accessible by the device on which the command list was created."
    - "The implementation must not access the memory pointed to by dstptr as it is free to be modified by either the Host or device up until execution."
    - "The value to initialize memory to is described by the pattern and the pattern size."
    - "The pattern size must be a power-of-two and less than or equal to the `maxMemoryFillPatternSize` member of $x_command_queue_group_properties_t."
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
analogue:
    - "**clEnqueueFillBuffer**"
    - "**clEnqueueSVMMemFill**"
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: ptr
      desc: "[in] pointer to memory to initialize"
    - type: "const void*"
      name: pattern
      desc: "[in] pointer to value to initialize memory to"
    - type: size_t
      name: pattern_size
      desc: "[in] size in bytes of the value to initialize memory to"
    - type: size_t
      name: size
      desc: "[in] size in bytes to initialize"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: struct
desc: "Copy region descriptor"
class: $xCommandList
name: $x_copy_region_t
members:
    - type: uint32_t
      name: originX
      desc: "[in] The origin x offset for region in bytes"
    - type: uint32_t
      name: originY
      desc: "[in] The origin y offset for region in rows"
    - type: uint32_t
      name: originZ
      desc: "[in] The origin z offset for region in slices"
    - type: uint32_t
      name: width
      desc: "[in] The region width relative to origin in bytes"
    - type: uint32_t
      name: height
      desc: "[in] The region height relative to origin in rows"
    - type: uint32_t
      name: depth
      desc: "[in] The region depth relative to origin in slices. Set this to 0 for 2D copy."
--- #--------------------------------------------------------------------------
type: function
desc: "Copies a region from a 2D or 3D array of host, device, or shared memory."
class: $xCommandList
name: AppendMemoryCopyRegion
details:
    - "The application must ensure the memory pointed to by dstptr and srcptr is accessible by the device on which the command list was created."
    - "The implementation must not access the memory pointed to by dstptr and srcptr as they are free to be modified by either the Host or device up until execution."
    - "The region width, height, and depth for both src and dst must be same. The origins can be different."
    - "The src and dst regions cannot be overlapping."
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: dstptr
      desc: "[in] pointer to destination memory to copy to"
    - type: "const $x_copy_region_t*"
      name: dstRegion
      desc: "[in] pointer to destination region to copy to"
    - type: "uint32_t"
      name: dstPitch
      desc: "[in] destination pitch in bytes"
    - type: "uint32_t"
      name: dstSlicePitch
      desc: "[in] destination slice pitch in bytes. This is required for 3D region copies where the `depth` member of $x_copy_region_t is not 0, otherwise it's ignored."
    - type: "const void*"
      name: srcptr
      desc: "[in] pointer to source memory to copy from"
    - type: "const $x_copy_region_t*"
      name: srcRegion
      desc: "[in] pointer to source region to copy from"
    - type: "uint32_t"
      name: srcPitch
      desc: "[in] source pitch in bytes"
    - type: "uint32_t"
      name: srcSlicePitch
      desc: "[in] source slice pitch in bytes. This is required for 3D region copies where the `depth` member of $x_copy_region_t is not 0, otherwise it's ignored."
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_OVERLAPPING_REGIONS
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies host, device, or shared memory from another context."
class: $xCommandList
name: AppendMemoryCopyFromContext
details:
    - "The current active and source context must be from the same driver."
    - "The application must ensure the memory pointed to by dstptr and srcptr is accessible by the device on which the command list was created."
    - "The implementation must not access the memory pointed to by dstptr and srcptr as they are free to be modified by either the Host or device up until execution."
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: dstptr
      desc: "[in] pointer to destination memory to copy to"
    - type: $x_context_handle_t
      name: hContextSrc
      desc: "[in] handle of source context object"
    - type: "const void*"
      name: srcptr
      desc: "[in] pointer to source memory to copy from"
    - type: size_t
      name: size
      desc: "[in] size in bytes to copy"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies an image."
class: $xCommandList
name: AppendImageCopy
analogue:
    - "**clEnqueueCopyImage**"
details:
    - "The application must ensure the image and events are accessible by the device on which the command list was created."
    - "The application must ensure the image format descriptors for both source and destination images are the same."
    - "The application must ensure the command list, images and events were created on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_image_handle_t
      name: hDstImage
      desc: "[in] handle of destination image to copy to"
    - type: $x_image_handle_t
      name: hSrcImage
      desc: "[in] handle of source image to copy from"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: struct
desc: "Region descriptor"
class: $xCommandList
name: $x_image_region_t
members:
    - type: uint32_t
      name: originX
      desc: "[in] The origin x offset for region in pixels"
    - type: uint32_t
      name: originY
      desc: "[in] The origin y offset for region in pixels"
    - type: uint32_t
      name: originZ
      desc: "[in] The origin z offset for region in pixels"
    - type: uint32_t
      name: width
      desc: "[in] The region width relative to origin in pixels"
    - type: uint32_t
      name: height
      desc: "[in] The region height relative to origin in pixels"
    - type: uint32_t
      name: depth
      desc: "[in] The region depth relative to origin. For 1D or 2D images, set this to 1."
--- #--------------------------------------------------------------------------
type: function
desc: "Copies a region of an image to another image."
class: $xCommandList
name: AppendImageCopyRegion
details:
    - "The application must ensure the image and events are accessible by the device on which the command list was created."
    - "The region width and height for both src and dst must be same. The origins can be different."
    - "The src and dst regions cannot be overlapping."
    - "The application must ensure the image format descriptors for both source and destination images are the same."
    - "The application must ensure the command list, images and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_image_handle_t
      name: hDstImage
      desc: "[in] handle of destination image to copy to"
    - type: $x_image_handle_t
      name: hSrcImage
      desc: "[in] handle of source image to copy from"
    - type: "const $x_image_region_t*"
      name: pDstRegion
      desc: "[in][optional] destination region descriptor"
    - type: "const $x_image_region_t*"
      name: pSrcRegion
      desc: "[in][optional] source region descriptor"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_OVERLAPPING_REGIONS
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies from an image to device or shared memory."
class: $xCommandList
name: AppendImageCopyToMemory
analogue:
    - clEnqueueReadImage
details:
    - "The application must ensure the memory pointed to by dstptr is accessible by the device on which the command list was created."
    - "The implementation must not access the memory pointed to by dstptr as it is free to be modified by either the Host or device up until execution."
    - "The application must ensure the image and events are accessible by the device on which the command list was created."
    - "The application must ensure the image format descriptor for the source image is a single-planar format."
    - "The application must ensure the command list, image and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "void*"
      name: dstptr
      desc: "[in] pointer to destination memory to copy to"
    - type: $x_image_handle_t
      name: hSrcImage
      desc: "[in] handle of source image to copy from"
    - type: "const $x_image_region_t*"
      name: pSrcRegion
      desc: "[in][optional] source region descriptor"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Copies to an image from device or shared memory."
class: $xCommandList
name: AppendImageCopyFromMemory
analogue:
    - clEnqueueWriteImage
details:
    - "The application must ensure the memory pointed to by srcptr is accessible by the device on which the command list was created."
    - "The implementation must not access the memory pointed to by srcptr as it is free to be modified by either the Host or device up until execution."
    - "The application must ensure the image and events are accessible by the device on which the command list was created."
    - "The application must ensure the image format descriptor for the destination image is a single-planar format."
    - "The application must ensure the command list, image and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: $x_image_handle_t
      name: hDstImage
      desc: "[in] handle of destination image to copy to"
    - type: "const void*"
      name: srcptr
      desc: "[in] pointer to source memory to copy from"
    - type: "const $x_image_region_t*"
      name: pDstRegion
      desc: "[in][optional] destination region descriptor"
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before launching; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before launching"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Asynchronously prefetches shared memory to the device associated with the specified command list"
class: $xCommandList
name: AppendMemoryPrefetch
details:
    - "This is a hint to improve performance only and is not required for correctness."
    - |
      Only prefetching to the device associated with the specified command list is supported.
      Prefetching to the host or to a peer device is not supported.
    - |
      Prefetching may not be supported for all allocation types for all devices.
      If memory prefetching is not supported for the specified memory range the prefetch hint may be ignored.
    - |
      Prefetching may only be supported at a device-specific granularity, such as at a page boundary.
      In this case, the memory range may be expanded such that the start and end of the range satisfy granularity requirements.
    - "The application must ensure the memory pointed to by ptr is accessible by the device on which the command list was created."
    - "The application must ensure the command list was created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
analogue:
    - clEnqueueSVMMigrateMem
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "const void*"
      name: ptr
      desc: "[in] pointer to start of the memory range to prefetch"
    - type: "size_t"
      name: size
      desc: "[in] size in bytes of the memory range to prefetch"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported memory advice hints"
class: $xCommandList
name: $x_memory_advice_t
etors:
    - name: SET_READ_MOSTLY
      value: "0"
      desc: "hint that memory will be read from frequently and written to rarely"
    - name: CLEAR_READ_MOSTLY
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_READ_MOSTLY"
    - name: SET_PREFERRED_LOCATION
      desc: "hint that the preferred memory location is the specified device"
    - name: CLEAR_PREFERRED_LOCATION
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_PREFERRED_LOCATION"
    - name: SET_NON_ATOMIC_MOSTLY
      desc: "hints that memory will mostly be accessed non-atomically"
    - name: CLEAR_NON_ATOMIC_MOSTLY
      desc: "removes the affect of $X_MEMORY_ADVICE_SET_NON_ATOMIC_MOSTLY"
    - name: BIAS_CACHED
      desc: "hints that memory should be cached"
    - name: BIAS_UNCACHED
      desc: "hints that memory should be not be cached"
--- #--------------------------------------------------------------------------
type: function
desc: "Provides advice about the use of a shared memory range"
class: $xCommandList
name: AppendMemAdvise
details:
    - "Memory advice is a performance hint only and is not required for functional correctness."
    - "Memory advice can be used to override driver heuristics to explicitly control shared memory behavior."
    - |
      Not all memory advice hints may be supported for all allocation types for all devices.
      If a memory advice hint is not supported by the device it will be ignored.
    - |
      Memory advice may only be supported at a device-specific granularity, such as at a page boundary.
      In this case, the memory range may be expanded such that the start and end of the range satisfy granularity requirements.
    - "The application must ensure the memory pointed to by ptr is accessible by the device on which the command list was created."
    - "The application must ensure the command list was created, and memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle, and the memory was allocated."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list"
    - type: "$x_device_handle_t"
      name: hDevice
      desc: "[in] device associated with the memory advice"
    - type: "const void*"
      name: ptr
      desc: "[in] Pointer to the start of the memory range"
    - type: size_t
      name: size
      desc: "[in] Size in bytes of the memory range"
    - type: $x_memory_advice_t
      name: advice
      desc: "[in] Memory advice for the memory range"
