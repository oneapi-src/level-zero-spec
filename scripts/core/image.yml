#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Images"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image creation flags"
class: $xImage
name: $x_image_flags_t
etors:
    - name: KERNEL_WRITE
      desc: "kernels will write contents"
    - name: BIAS_UNCACHED
      desc: "device should not cache contents"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image types"
class: $xImage
name: $x_image_type_t
etors:
    - name: 1D
      desc: "1D"
    - name: 1DARRAY
      desc: "1D array"
    - name: 2D
      desc: "2D"
    - name: 2DARRAY
      desc: "2D array"
    - name: 3D
      desc: "3D"
    - name: BUFFER
      desc: "Buffer"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image format layouts"
class: $xImage
name: $x_image_format_layout_t
etors:
    - name: "8"
      desc: "8-bit single component layout"
    - name: "16"
      desc: "16-bit single component layout"
    - name: "32"
      desc: "32-bit single component layout"
    - name: "8_8"
      desc: "2-component 8-bit layout"
    - name: "8_8_8_8"
      desc: "4-component 8-bit layout"
    - name: "16_16"
      desc: "2-component 16-bit layout"
    - name: "16_16_16_16"
      desc: "4-component 16-bit layout"
    - name: "32_32"
      desc: "2-component 32-bit layout"
    - name: "32_32_32_32"
      desc: "4-component 32-bit layout"
    - name: "10_10_10_2"
      desc: "4-component 10_10_10_2 layout"
    - name: "11_11_10"
      desc: "3-component 11_11_10 layout"
    - name: "5_6_5"
      desc: "3-component 5_6_5 layout"
    - name: "5_5_5_1"
      desc: "4-component 5_5_5_1 layout"
    - name: "4_4_4_4"
      desc: "4-component 4_4_4_4 layout"
    - name: Y8
      desc: "Media Format: Y8. Format type and swizzle is ignored for this."     
    - name: NV12
      desc: "Media Format: NV12. Format type and swizzle is ignored for this."
    - name: YUYV
      desc: "Media Format: YUYV. Format type and swizzle is ignored for this."
    - name: VYUY
      desc: "Media Format: VYUY. Format type and swizzle is ignored for this."
    - name: YVYU
      desc: "Media Format: YVYU. Format type and swizzle is ignored for this."
    - name: UYVY
      desc: "Media Format: UYVY. Format type and swizzle is ignored for this."
    - name: AYUV
      desc: "Media Format: AYUV. Format type and swizzle is ignored for this."
    - name: P010
      desc: "Media Format: P010. Format type and swizzle is ignored for this."
    - name: Y410
      desc: "Media Format: Y410. Format type and swizzle is ignored for this."
    - name: P012
      desc: "Media Format: P012. Format type and swizzle is ignored for this."
    - name: Y16
      desc: "Media Format: Y16. Format type and swizzle is ignored for this."
    - name: P016
      desc: "Media Format: P016. Format type and swizzle is ignored for this."
    - name: Y216
      desc: "Media Format: Y216. Format type and swizzle is ignored for this."
    - name: P216
      desc: "Media Format: P216. Format type and swizzle is ignored for this."
    - name: P8
      desc: "Media Format: P8. Format type and swizzle is ignored for this."
    - name: YUY2
      desc: "Media Format: YUY2. Format type and swizzle is ignored for this."
    - name: A8P8
      desc: "Media Format: A8P8. Format type and swizzle is ignored for this."
    - name: IA44
      desc: "Media Format: IA44. Format type and swizzle is ignored for this."
    - name: AI44
      desc: "Media Format: AI44. Format type and swizzle is ignored for this."
    - name: Y416
      desc: "Media Format: Y416. Format type and swizzle is ignored for this."
    - name: Y210
      desc: "Media Format: Y210. Format type and swizzle is ignored for this."
    - name: I420
      desc: "Media Format: I420. Format type and swizzle is ignored for this."
    - name: YV12
      desc: "Media Format: YV12. Format type and swizzle is ignored for this."
    - name: 400P
      desc: "Media Format: 400P. Format type and swizzle is ignored for this."
    - name: 422H
      desc: "Media Format: 422H. Format type and swizzle is ignored for this."
    - name: 422V
      desc: "Media Format: 422V. Format type and swizzle is ignored for this."
    - name: 444P
      desc: "Media Format: 444P. Format type and swizzle is ignored for this."
    - name: RGBP
      desc: "Media Format: RGBP. Format type and swizzle is ignored for this."
    - name: BRGP
      desc: "Media Format: BRGP. Format type and swizzle is ignored for this."

--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image format types"
class: $xImage
name: $x_image_format_type_t
etors:
    - name: UINT
      desc: "Unsigned integer"
    - name: SINT
      desc: "Signed integer"
    - name: UNORM
      desc: "Unsigned normalized integer"
    - name: SNORM
      desc: "Signed normalized integer"
    - name: FLOAT
      desc: "Float"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported image format component swizzle into channel"
class: $xImage
name: $x_image_format_swizzle_t
etors:
    - name: R
      desc: "Red component"
    - name: G
      desc: "Green component"
    - name: B
      desc: "Blue component"
    - name: A
      desc: "Alpha component"
    - name: "0"
      desc: "Zero"
    - name: "1"
      desc: "One"
    - name: X
      desc: "Don't care"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image format "
class: $xImage
name: $x_image_format_t
members:
    - type: $x_image_format_layout_t
      name: layout
      desc: "[in] image format component layout"
    - type: $x_image_format_type_t
      name: type
      desc: "[in] image format type. Media formats can't be used for $X_IMAGE_TYPE_BUFFER."
    - type: $x_image_format_swizzle_t
      name: x
      desc: "[in] image component swizzle into channel x"
    - type: $x_image_format_swizzle_t
      name: y
      desc: "[in] image component swizzle into channel y"
    - type: $x_image_format_swizzle_t
      name: z
      desc: "[in] image component swizzle into channel z"
    - type: $x_image_format_swizzle_t
      name: w
      desc: "[in] image component swizzle into channel w"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image descriptor"
class: $xImage
name: $x_image_desc_t
base: $x_base_desc_t
members:
    - type: $x_image_flags_t
      name: flags
      desc: |
            [in] creation flags.
            must be 0 (default) or a valid combination of $x_image_flag_t;
            default is read-only, cached access.
    - type: $x_image_type_t
      name: type
      desc: "[in] image type"
    - type: $x_image_format_t
      name: format
      desc: "[in] image format"
    - type: uint64_t
      name: width
      desc: |
            [in] width dimension.
            $X_IMAGE_TYPE_BUFFER: size in bytes; see $x_device_image_properties_t.maxImageBufferSize for limits.
            $X_IMAGE_TYPE_1D, $X_IMAGE_TYPE_1DARRAY: width in pixels; see $x_device_image_properties_t.maxImageDims1D for limits.
            $X_IMAGE_TYPE_2D, $X_IMAGE_TYPE_2DARRAY: width in pixels; see $x_device_image_properties_t.maxImageDims2D for limits.
            $X_IMAGE_TYPE_3D: width in pixels; see $x_device_image_properties_t.maxImageDims3D for limits.
      init: "0"
    - type: uint32_t
      name: height
      desc: |
            [in] height dimension.
            $X_IMAGE_TYPE_2D, $X_IMAGE_TYPE_2DARRAY: height in pixels; see $x_device_image_properties_t.maxImageDims2D for limits.
            $X_IMAGE_TYPE_3D: height in pixels; see $x_device_image_properties_t.maxImageDims3D for limits.
            other: ignored.
      init: "0"
    - type: uint32_t
      name: depth
      desc: |
            [in] depth dimension.
            $X_IMAGE_TYPE_3D: depth in pixels; see $x_device_image_properties_t.maxImageDims3D for limits.
            other: ignored.
      init: "0"
    - type: uint32_t
      name: arraylevels
      desc: |
            [in] array levels.
            $X_IMAGE_TYPE_1DARRAY, $X_IMAGE_TYPE_2DARRAY: see $x_device_image_properties_t.maxImageArraySlices for limits.
            other: ignored.
      init: "1"
    - type: uint32_t
      name: miplevels
      desc: "[in] mipmap levels (must be 0)"
      init: "0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported sampler filtering flags"
class: $xImage
name: $x_image_sampler_filter_flags_t
etors:
    - name: POINT
      desc: "device supports point filtering"
    - name: LINEAR
      desc: "device supports linear filtering"
--- #--------------------------------------------------------------------------
type: struct
desc: "Image properties"
class: $xImage
name: $x_image_properties_t
base: $x_base_properties_t
members:
    - type: $x_image_sampler_filter_flags_t
      name: samplerFilterFlags
      desc: |
            [out] supported sampler filtering.
            returns 0 (unsupported) or a combination of $x_image_sampler_filter_flag_t.
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves supported properties of an image."
class: $xImage
name: GetProperties
decl: static
ordinal: "0"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_image_desc_t*"
      name: desc
      desc: "[in] pointer to image descriptor"
    - type: "$x_image_properties_t*"
      name: pImageProperties
      desc: "[out] pointer to image properties"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an image on the context."
class: $xImage
name: Create
decl: static
ordinal: "0"
analogue:
    - clCreateImage
details:
    - "The application must only use the image for the device, or its sub-devices, which was provided during creation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_image_desc_t*"
      name: desc
      desc: "[in] pointer to image descriptor"
    - type: "$x_image_handle_t*"
      name: phImage
      desc: "[out] pointer to handle of image object created"
returns:
    - $X_RESULT_ERROR_UNSUPPORTED_IMAGE_FORMAT
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_DEVICE_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Deletes an image object."
class: $xImage
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the image before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this image."
    - "The application must **not** call this function from simultaneous threads with the same image handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_image_handle_t
      name: hImage
      desc: "[in][release] handle of image object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for image"
name: $xImage
owner: $xDevice
members:
    - type: $x_image_handle_t
      name: handle
      desc: "[in] handle of image object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_image_desc_t
      name: desc
      desc: "[in] descriptor of the image object"
