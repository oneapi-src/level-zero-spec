#
# Copyright (C) 2023 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Extension for supporting ray tracing acceleration structure builder."
version: "1.7"
--- #--------------------------------------------------------------------------
type: macro
desc: "Ray Tracing Acceleration Structure Builder Extension Name"
version: "1.7"
name: $X_RTAS_BUILDER_EXP_NAME
value: '"$X_experimental_rtas_builder"'
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray Tracing Acceleration Structure Builder Extension Version(s)"
version: "1.7"
name: $x_rtas_builder_exp_version_t
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure device flags"
version: "1.7"
class: $xDevice
name: $x_rtas_device_exp_flags_t
etors:
    - name: RESERVED
      desc: "reserved for future use"
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure format"
version: "1.7"
class: $xDevice
name: $x_rtas_format_exp_t
etors:
    - name: INVALID
      desc: "Invalid acceleration structure format"
details:
    - "This is an opaque ray tracing acceleration structure format identifier."
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder flags"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_exp_flags_t
etors:
    - name: RESERVED
      desc: "Reserved for future use"
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder parallel operation flags"
version: "1.7"
class: $xRTASParallelOperation
name: $x_rtas_parallel_operation_exp_flags_t
etors:
    - name: RESERVED
      desc: "Reserved for future use"
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder geometry flags"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_geometry_exp_flags_t
etors:
    - name: NON_OPAQUE
      desc: "non-opaque geometries invoke an any-hit shader"
--- #--------------------------------------------------------------------------
type: typedef
desc: "Packed ray tracing acceleration structure builder geometry flags (see $x_rtas_builder_geometry_exp_flags_t)"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_packed_geometry_exp_flags_t
value: uint8_t
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder instance flags"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_instance_exp_flags_t
etors:
    - name: TRIANGLE_CULL_DISABLE
      desc: "disables culling of front-facing and back-facing triangles"
    - name: TRIANGLE_FRONT_COUNTERCLOCKWISE
      desc: "reverses front and back face of triangles"
    - name: TRIANGLE_FORCE_OPAQUE
      desc: "forces instanced geometry to be opaque, unless ray flag forces it to be non-opaque"
    - name: TRIANGLE_FORCE_NON_OPAQUE
      desc: "forces instanced geometry to be non-opaque, unless ray flag forces it to be opaque"
--- #--------------------------------------------------------------------------
type: typedef
desc: "Packed ray tracing acceleration structure builder instance flags (see $x_rtas_builder_instance_exp_flags_t)"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_packed_instance_exp_flags_t
value: uint8_t
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder build operation flags"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_build_op_exp_flags_t
etors:
    - name: COMPACT
      desc: "build more compact acceleration structure"
    - name: NO_DUPLICATE_ANYHIT_INVOCATION
      desc: "guarantees single any-hit shader invocation per primitive"
details:
    - "These flags allow the application to tune the acceleration structure build operation."
    - >
      The acceleration structure builder implementation might choose to use spatial splitting to split large or long primitives into smaller pieces. This may result in any-hit shaders being invoked multiple times for non-opaque primitives, unless $X_RTAS_BUILDER_BUILD_OP_EXP_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION is specified.
    - "Usage of any of these flags may reduce ray tracing performance."
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder build quality hint"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_build_quality_hint_exp_t
etors:
    - name: LOW
      desc: "build low-quality acceleration structure (fast)"
    - name: MEDIUM
      desc: "build medium-quality acceleration structure (slower)"
    - name: HIGH
      desc: "build high-quality acceleration structure (slow)"
details:
    - "Depending on use case different quality modes for acceleration structure build are supported."
    - >
      A low-quality build builds an acceleration structure fast, but at the cost of some reduction in ray tracing performance. This mode is recommended for dynamic content, such as animated characters.
    - >
      A medium-quality build uses a compromise between build quality and ray tracing performance. This mode should be used by default.
    - >
      Higher ray tracing performance can be achieved by using a high-quality build, but acceleration structure build performance might be significantly reduced.
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure builder geometry type"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_geometry_type_exp_t
etors:
    - name: TRIANGLES
      desc: "triangle mesh geometry type"
    - name: QUADS
      desc: "quad mesh geometry type"
    - name: PROCEDURAL
      desc: "procedural geometry type"
    - name: INSTANCE
      desc: "instance geometry type"
--- #--------------------------------------------------------------------------
type: typedef
desc: "Packed ray tracing acceleration structure builder geometry type (see $x_rtas_builder_geometry_type_exp_t)"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_packed_geometry_type_exp_t
value: uint8_t
--- #--------------------------------------------------------------------------
type: enum
desc: "Ray tracing acceleration structure data buffer element format"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_input_data_format_exp_t
etors:
    - name: FLOAT3
      desc: "3-component float vector (see $x_rtas_float3_exp_t)"
    - name: FLOAT3X4_COLUMN_MAJOR
      desc: "3x4 affine transformation in column-major format (see $x_rtas_transform_float3x4_column_major_exp_t)"
    - name: FLOAT3X4_ALIGNED_COLUMN_MAJOR
      desc: "3x4 affine transformation in column-major format (see $x_rtas_transform_float3x4_aligned_column_major_exp_t)"
    - name: FLOAT3X4_ROW_MAJOR
      desc: "3x4 affine transformation in row-major format (see $x_rtas_transform_float3x4_row_major_exp_t)"
    - name: AABB
      desc: "3-dimensional axis-aligned bounding-box (see $x_rtas_aabb_exp_t)"
    - name: TRIANGLE_INDICES_UINT32
      desc: "Unsigned 32-bit triangle indices (see $x_rtas_triangle_indices_uint32_exp_t)"
    - name: QUAD_INDICES_UINT32
      desc: "Unsigned 32-bit quad indices (see $x_rtas_quad_indices_uint32_exp_t)"
details:
    - "Specifies the format of data buffer elements."
    - "Data buffers may contain instancing transform matrices, triangle/quad vertex indices, etc..."
--- #--------------------------------------------------------------------------
type: typedef
desc: "Packed ray tracing acceleration structure data buffer element format (see $x_rtas_builder_input_data_format_exp_t)"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_packed_input_data_format_exp_t
value: uint8_t
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of ray tracing acceleration structure builder object"
version: "1.7"
class: $xRTASBuilder
name: "$x_rtas_builder_exp_handle_t"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of ray tracing acceleration structure builder parallel operation object"
version: "1.7"
class: $xRTASParallelOperation
name: "$x_rtas_parallel_operation_exp_handle_t"
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder descriptor"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_exp_desc_t
base: $x_base_desc_t
members:
    - type: $x_rtas_builder_exp_version_t
      name: builderVersion
      desc: "[in] ray tracing acceleration structure builder version"
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder properties"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_exp_properties_t
base: $x_base_properties_t
members:
    - type: $x_rtas_builder_exp_flags_t
      name: flags
      desc: "[out] ray tracing acceleration structure builder flags"
    - type: size_t
      name: rtasBufferSizeBytesExpected
      desc: |
            [out] expected size (in bytes) required for acceleration structure buffer
                - When using an acceleration structure buffer of this size, the build is expected to succeed; however, it is possible that the build may fail with $X_RESULT_EXP_RTAS_BUILD_RETRY
    - type: size_t
      name: rtasBufferSizeBytesMaxRequired
      desc: |
            [out] worst-case size (in bytes) required for acceleration structure buffer
                - When using an acceleration structure buffer of this size, the build is guaranteed to not run out of memory.
    - type: size_t
      name: scratchBufferSizeBytes
      desc: "[out] scratch buffer size (in bytes) required for acceleration structure build."
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder parallel operation properties"
version: "1.7"
class: $xRTASParallelOperation
name: $x_rtas_parallel_operation_exp_properties_t
base: $x_base_properties_t
members:
    - type: $x_rtas_parallel_operation_exp_flags_t
      name: flags
      desc: "[out] ray tracing acceleration structure builder parallel operation flags"
    - type: uint32_t
      name: maxConcurrency
      desc: "[out] maximum number of threads that may join the parallel operation"
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure device properties"
version: "1.7"
class: $xDevice
name: $x_rtas_device_exp_properties_t
base: $x_base_properties_t
members:
    - type: $x_rtas_device_exp_flags_t
      name: flags
      desc: "[out] ray tracing acceleration structure device flags"
    - type: $x_rtas_format_exp_t
      name: rtasFormat
      desc: "[out] ray tracing acceleration structure format"
    - type: uint32_t
      name: rtasBufferAlignment
      desc: "[out] required alignment of acceleration structure buffer"
details:
    - "This structure may be passed to $xDeviceGetProperties, via `pNext` member of $x_device_properties_t."
    - "The implementation shall populate `format` with a value other than $X_RTAS_FORMAT_EXP_INVALID when the device supports ray tracing."
--- #--------------------------------------------------------------------------
type: struct
desc: "A 3-component vector type"
version: "1.7"
name: $x_rtas_float3_exp_t
members:
    - type: float
      name: x
      desc: "[in] x-coordinate of float3 vector"
    - type: float
      name: y
      desc: "[in] y-coordinate of float3 vector"
    - type: float
      name: z
      desc: "[in] z-coordinate of float3 vector"
--- #--------------------------------------------------------------------------
type: struct
desc: "3x4 affine transformation in column-major layout"
version: "1.7"
name: $x_rtas_transform_float3x4_column_major_exp_t
members:
    - type: float
      name: vx_x
      desc: "[in] element 0 of column 0 of 3x4 matrix"
    - type: float
      name: vx_y
      desc: "[in] element 1 of column 0 of 3x4 matrix"
    - type: float
      name: vx_z
      desc: "[in] element 2 of column 0 of 3x4 matrix"
    - type: float
      name: vy_x
      desc: "[in] element 0 of column 1 of 3x4 matrix"
    - type: float
      name: vy_y
      desc: "[in] element 1 of column 1 of 3x4 matrix"
    - type: float
      name: vy_z
      desc: "[in] element 2 of column 1 of 3x4 matrix"
    - type: float
      name: vz_x
      desc: "[in] element 0 of column 2 of 3x4 matrix"
    - type: float
      name: vz_y
      desc: "[in] element 1 of column 2 of 3x4 matrix"
    - type: float
      name: vz_z
      desc: "[in] element 2 of column 2 of 3x4 matrix"
    - type: float
      name: p_x
      desc: "[in] element 0 of column 3 of 3x4 matrix"
    - type: float
      name: p_y
      desc: "[in] element 1 of column 3 of 3x4 matrix"
    - type: float
      name: p_z
      desc: "[in] element 2 of column 3 of 3x4 matrix"
details:
    - |
      A 3x4 affine transformation in column major layout, consisting of vectors
          - vx=(vx_x, vx_y, vx_z),
          - vy=(vy_x, vy_y, vy_z),
          - vz=(vz_x, vz_y, vz_z), and
          - p=(p_x, p_y, p_z)
    - "The transformation transforms a point (x, y, z) to: `x*vx + y*vy + z*vz + p`."
--- #--------------------------------------------------------------------------
type: struct
desc: "3x4 affine transformation in column-major layout with aligned column vectors"
version: "1.7"
name: $x_rtas_transform_float3x4_aligned_column_major_exp_t
members:
    - type: float
      name: vx_x
      desc: "[in] element 0 of column 0 of 3x4 matrix"
    - type: float
      name: vx_y
      desc: "[in] element 1 of column 0 of 3x4 matrix"
    - type: float
      name: vx_z
      desc: "[in] element 2 of column 0 of 3x4 matrix"
    - type: float
      name: pad0
      desc: "[in] ignored padding"
    - type: float
      name: vy_x
      desc: "[in] element 0 of column 1 of 3x4 matrix"
    - type: float
      name: vy_y
      desc: "[in] element 1 of column 1 of 3x4 matrix"
    - type: float
      name: vy_z
      desc: "[in] element 2 of column 1 of 3x4 matrix"
    - type: float
      name: pad1
      desc: "[in] ignored padding"
    - type: float
      name: vz_x
      desc: "[in] element 0 of column 2 of 3x4 matrix"
    - type: float
      name: vz_y
      desc: "[in] element 1 of column 2 of 3x4 matrix"
    - type: float
      name: vz_z
      desc: "[in] element 2 of column 2 of 3x4 matrix"
    - type: float
      name: pad2
      desc: "[in] ignored padding"
    - type: float
      name: p_x
      desc: "[in] element 0 of column 3 of 3x4 matrix"
    - type: float
      name: p_y
      desc: "[in] element 1 of column 3 of 3x4 matrix"
    - type: float
      name: p_z
      desc: "[in] element 2 of column 3 of 3x4 matrix"
    - type: float
      name: pad3
      desc: "[in] ignored padding"
details:
    - |
      A 3x4 affine transformation in column major layout, consisting of vectors
        - vx=(vx_x, vx_y, vx_z),
        - vy=(vy_x, vy_y, vy_z),
        - vz=(vz_x, vz_y, vz_z), and
        - p=(p_x, p_y, p_z)
    - "The transformation transforms a point (x, y, z) to: `x*vx + y*vy + z*vz + p`."
    - "The column vectors are aligned to 16-bytes and pad members are ignored."
--- #--------------------------------------------------------------------------
type: struct
desc: "3x4 affine transformation in row-major layout"
version: "1.7"
name: $x_rtas_transform_float3x4_row_major_exp_t
members:
    - type: float
      name: vx_x
      desc: "[in] element 0 of row 0 of 3x4 matrix"
    - type: float
      name: vy_x
      desc: "[in] element 1 of row 0 of 3x4 matrix"
    - type: float
      name: vz_x
      desc: "[in] element 2 of row 0 of 3x4 matrix"
    - type: float
      name: p_x
      desc: "[in] element 3 of row 0 of 3x4 matrix"
    - type: float
      name: vx_y
      desc: "[in] element 0 of row 1 of 3x4 matrix"
    - type: float
      name: vy_y
      desc: "[in] element 1 of row 1 of 3x4 matrix"
    - type: float
      name: vz_y
      desc: "[in] element 2 of row 1 of 3x4 matrix"
    - type: float
      name: p_y
      desc: "[in] element 3 of row 1 of 3x4 matrix"
    - type: float
      name: vx_z
      desc: "[in] element 0 of row 2 of 3x4 matrix"
    - type: float
      name: vy_z
      desc: "[in] element 1 of row 2 of 3x4 matrix"
    - type: float
      name: vz_z
      desc: "[in] element 2 of row 2 of 3x4 matrix"
    - type: float
      name: p_z
      desc: "[in] element 3 of row 2 of 3x4 matrix"
details:
    - |
      A 3x4 affine transformation in row-major layout, consisting of vectors
          - vx=(vx_x, vx_y, vx_z),
          - vy=(vy_x, vy_y, vy_z),
          - vz=(vz_x, vz_y, vz_z), and
          - p=(p_x, p_y, p_z)
    - "The transformation transforms a point (x, y, z) to: `x*vx + y*vy + z*vz + p`."
--- #--------------------------------------------------------------------------
type: struct
desc: "A 3-dimensional axis-aligned bounding-box with lower and upper bounds in each dimension"
version: "1.7"
name: $x_rtas_aabb_exp_t
members:
    - type: $x_rtas_float3_exp_t
      name: lower
      desc: "[in] lower bounds of AABB"
    - type: $x_rtas_float3_exp_t
      name: upper
      desc: "[in] upper bounds of AABB"
--- #--------------------------------------------------------------------------
type: struct
desc: "Triangle represented using 3 vertex indices"
version: "1.7"
name: $x_rtas_triangle_indices_uint32_exp_t
members:
    - type: uint32_t
      name: v0
      desc: "[in] first index pointing to the first triangle vertex in vertex array"
    - type: uint32_t
      name: v1
      desc: "[in] second index pointing to the second triangle vertex in vertex array"
    - type: uint32_t
      name: v2
      desc: "[in] third index pointing to the third triangle vertex in vertex array"
details:
    - "Represents a triangle using 3 vertex indices that index into a vertex array that needs to be provided together with the index array."
    - |
      The linear barycentric u/v parametrization of the triangle is defined as:
          - (u=0, v=0) at v0,
          - (u=1, v=0) at v1, and
          - (u=0, v=1) at v2
--- #--------------------------------------------------------------------------
type: struct
desc: "Quad represented using 4 vertex indices"
version: "1.7"
name: $x_rtas_quad_indices_uint32_exp_t
members:
    - type: uint32_t
      name: v0
      desc: "[in] first index pointing to the first quad vertex in vertex array"
    - type: uint32_t
      name: v1
      desc: "[in] second index pointing to the second quad vertex in vertex array"
    - type: uint32_t
      name: v2
      desc: "[in] third index pointing to the third quad vertex in vertex array"
    - type: uint32_t
      name: v3
      desc: "[in] fourth index pointing to the fourth quad vertex in vertex array"
details:
    - "Represents a quad composed of 4 indices that index into a vertex array that needs to be provided together with the index array."
    - |
      A quad is a triangle pair represented using 4 vertex indices v0, v1, v2, v3.
      The first triangle is made out of indices v0, v1, v3 and the second triangle
      from indices v2, v3, v1. The piecewise linear barycentric u/v parametrization
      of the quad is defined as:
          - (u=0, v=0) at v0,
          - (u=1, v=0) at v1,
          - (u=0, v=1) at v3, and
          - (u=1, v=1) at v2
      This is achieved by correcting the u'/v' coordinates of the second triangle by
      *u = 1-u'* and *v = 1-v'*, yielding a piecewise linear parametrization.
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder geometry info"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_geometry_info_exp_t
members:
    - type: $x_rtas_builder_packed_geometry_type_exp_t
      name: geometryType
      desc: "[in] geometry type"
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder triangle mesh geometry info"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_triangles_geometry_info_exp_t
members:
    - type: $x_rtas_builder_packed_geometry_type_exp_t
      name: geometryType
      desc: "[in] geometry type, must be $X_RTAS_BUILDER_GEOMETRY_TYPE_EXP_TRIANGLES"
    - type: $x_rtas_builder_packed_geometry_exp_flags_t
      name: geometryFlags
      desc: "[in] 0 or some combination of $x_rtas_builder_geometry_exp_flag_t bits representing the geometry flags for all primitives of this geometry"
    - type: uint8_t
      name: geometryMask
      desc: "[in] 8-bit geometry mask for ray masking"
    - type: $x_rtas_builder_packed_input_data_format_exp_t
      name: triangleFormat
      desc: "[in] format of triangle buffer data, must be $X_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_TRIANGLE_INDICES_UINT32"
    - type: $x_rtas_builder_packed_input_data_format_exp_t
      name: vertexFormat
      desc: "[in] format of vertex buffer data, must be $X_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FLOAT3"
    - type: uint32_t
      name: triangleCount
      desc: "[in] number of triangles in triangle buffer"
    - type: uint32_t
      name: vertexCount
      desc: "[in] number of vertices in vertex buffer"
    - type: uint32_t
      name: triangleStride
      desc: "[in] stride (in bytes) of triangles in triangle buffer"
    - type: uint32_t
      name: vertexStride
      desc: "[in] stride (in bytes) of vertices in vertex buffer"
    - type: void*
      name: pTriangleBuffer
      desc: "[in] pointer to array of triangle indices in specified format"
    - type: void*
      name: pVertexBuffer
      desc: "[in] pointer to array of triangle vertices in specified format"
details:
    - |
      The linear barycentric u/v parametrization of the triangle is defined as:
          - (u=0, v=0) at v0,
          - (u=1, v=0) at v1, and
          - (u=0, v=1) at v2
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder quad mesh geometry info"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_quads_geometry_info_exp_t
members:
    - type: $x_rtas_builder_packed_geometry_type_exp_t
      name: geometryType
      desc: "[in] geometry type, must be $X_RTAS_BUILDER_GEOMETRY_TYPE_EXP_QUADS"
    - type: $x_rtas_builder_packed_geometry_exp_flags_t
      name: geometryFlags
      desc: "[in] 0 or some combination of $x_rtas_builder_geometry_exp_flag_t bits representing the geometry flags for all primitives of this geometry"
    - type: uint8_t
      name: geometryMask
      desc: "[in] 8-bit geometry mask for ray masking"
    - type: $x_rtas_builder_packed_input_data_format_exp_t
      name: quadFormat
      desc: "[in] format of quad buffer data, must be $X_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_QUAD_INDICES_UINT32"
    - type: $x_rtas_builder_packed_input_data_format_exp_t
      name: vertexFormat
      desc: "[in] format of vertex buffer data, must be $X_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FLOAT3"
    - type: uint32_t
      name: quadCount
      desc: "[in] number of quads in quad buffer"
    - type: uint32_t
      name: vertexCount
      desc: "[in] number of vertices in vertex buffer"
    - type: uint32_t
      name: quadStride
      desc: "[in] stride (in bytes) of quads in quad buffer"
    - type: uint32_t
      name: vertexStride
      desc: "[in] stride (in bytes) of vertices in vertex buffer"
    - type: void*
      name: pQuadBuffer
      desc: "[in] pointer to array of quad indices in specified format"
    - type: void*
      name: pVertexBuffer
      desc: "[in] pointer to array of quad vertices in specified format"
details:
    - |
      A quad is a triangle pair represented using 4 vertex indices v0, v1, v2, v3.
      The first triangle is made out of indices v0, v1, v3 and the second triangle
      from indices v2, v3, v1. The piecewise linear barycentric u/v parametrization
      of the quad is defined as:
          - (u=0, v=0) at v0,
          - (u=1, v=0) at v1,
          - (u=0, v=1) at v3, and
          - (u=1, v=1) at v2
      This is achieved by correcting the u'/v' coordinates of the second triangle by
      *u = 1-u'* and *v = 1-v'*, yielding a piecewise linear parametrization.
--- #--------------------------------------------------------------------------
type: struct
desc: "AABB callback function parameters"
version: "1.7"
name: $x_rtas_geometry_aabbs_exp_cb_params_t
base: $x_base_cb_params_t
members:
    - type: uint32_t
      name: primID
      desc: "[in] first primitive to return bounds for"
    - type: uint32_t
      name: primIDCount
      desc: "[in] number of primitives to return bounds for"
    - type: void*
      name: pGeomUserPtr
      desc: "[in] pointer provided through geometry descriptor"
    - type: void*
      name: pBuildUserPtr
      desc: "[in] pointer provided through $xRTASBuilderBuildExp function"
    - type: $x_rtas_aabb_exp_t*
      name: pBoundsOut
      desc: "[out] destination buffer to write AABB bounds to"
--- #--------------------------------------------------------------------------
type: callback
desc: "Callback function pointer type to return AABBs for a range of procedural primitives"
version: "1.7"
name: $x_rtas_geometry_aabbs_cb_exp_t
returntype: void
params:
    - type: $x_rtas_geometry_aabbs_exp_cb_params_t*
      name: params
      desc: "[in] callback function parameters structure"
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder procedural primitives geometry info"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_procedural_geometry_info_exp_t
members:
    - type: $x_rtas_builder_packed_geometry_type_exp_t
      name: geometryType
      desc: "[in] geometry type, must be $X_RTAS_BUILDER_GEOMETRY_TYPE_EXP_PROCEDURAL"
    - type: $x_rtas_builder_packed_geometry_exp_flags_t
      name: geometryFlags
      desc: "[in] 0 or some combination of $x_rtas_builder_geometry_exp_flag_t bits representing the geometry flags for all primitives of this geometry"
    - type: uint8_t
      name: geometryMask
      desc: "[in] 8-bit geometry mask for ray masking"
    - type: uint8_t
      name: reserved
      desc: "[in] reserved for future use"
    - type: uint32_t
      name: primCount
      desc: "[in] number of primitives in geometry"
    - type: $x_rtas_geometry_aabbs_cb_exp_t
      name: pfnGetBoundsCb
      desc: "[in] pointer to callback function to get the axis-aligned bounding-box for a range of primitives"
    - type: void*
      name: pGeomUserPtr
      desc: "[in] user data pointer passed to callback"
details:
    - |
      A host-side bounds callback function is invoked by the acceleration structure builder to query the bounds of procedural primitives on demand. The callback is passed some `pGeomUserPtr` that can point to an application-side representation of the procedural primitives. Further, a second `pBuildUserPtr`, which is set by a parameter to $xRTASBuilderBuildExp, is passed to the callback. This allows the build to change the bounds of the procedural geometry, for example, to build a BVH only over a short time range to implement multi-segment motion blur.
--- #--------------------------------------------------------------------------
type: struct
desc: "Ray tracing acceleration structure builder instance geometry info"
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_instance_geometry_info_exp_t
members:
    - type: $x_rtas_builder_packed_geometry_type_exp_t
      name: geometryType
      desc: "[in] geometry type, must be $X_RTAS_BUILDER_GEOMETRY_TYPE_EXP_INSTANCE"
    - type: $x_rtas_builder_packed_instance_exp_flags_t
      name: instanceFlags
      desc: "[in] 0 or some combination of $x_rtas_builder_geometry_exp_flag_t bits representing the geometry flags for all primitives of this geometry"
    - type: uint8_t
      name: geometryMask
      desc: "[in] 8-bit geometry mask for ray masking"
    - type: $x_rtas_builder_packed_input_data_format_exp_t
      name: transformFormat
      desc: "[in] format of the specified transformation"
    - type: uint32_t
      name: instanceUserID
      desc: "[in] user-specified identifier for the instance"
    - type: void*
      name: pTransform
      desc: "[in] object-to-world instance transformation in specified format"
    - type: $x_rtas_aabb_exp_t*
      name: pBounds
      desc: "[in] object-space axis-aligned bounding-box of the instanced acceleration structure"
    - type: void*
      name: pAccelerationStructure
      desc: "[in] pointer to acceleration structure to instantiate"
--- #--------------------------------------------------------------------------
type: struct
desc: ""
version: "1.7"
class: $xRTASBuilder
name: $x_rtas_builder_build_op_exp_desc_t
base: $x_base_desc_t
members:
    - type: $x_rtas_format_exp_t
      name: rtasFormat
      desc: "[in] ray tracing acceleration structure format"
    - type: $x_rtas_builder_build_quality_hint_exp_t
      name: buildQuality
      desc: "[in] acceleration structure build quality hint"
    - type: $x_rtas_builder_build_op_exp_flags_t
      name: buildFlags
      desc: "[in] 0 or some combination of $x_rtas_builder_build_op_exp_flag_t flags"
    - type: const $x_rtas_builder_geometry_info_exp_t**
      name: ppGeometries
      desc: "[in][optional][range(0, `numGeometries`)] NULL or a valid array of pointers to geometry infos"
    - type: uint32_t
      name: numGeometries
      desc: "[in] number of geometries in geometry infos array, can be zero when `ppGeometries` is NULL"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a ray tracing acceleration structure builder object"
version: "1.7"
class: $xRTASBuilder
name: CreateExp
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of driver object"
    - type: const $x_rtas_builder_exp_desc_t*
      name: pDescriptor
      desc: "[in] pointer to builder descriptor"
    - type: $x_rtas_builder_exp_handle_t*
      name: phBuilder
      desc: "[out] handle of builder object"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
    - "The implementation must support $X_experimental_rtas_builder extension."
results:
    - $X_RESULT_ERROR_DEPENDENCY_UNAVAILABLE:
        - "Runtime dependency failed to load"
    - $X_RESULT_ERROR_UNSUPPORTED_VERSION:
        - "Requested version passed in via descriptor is unavailable or not supported by driver"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves ray tracing acceleration structure builder properties"
version: "1.7"
class: $xRTASBuilder
name: GetBuildPropertiesExp
params:
    - type: $x_rtas_builder_exp_handle_t
      name: hBuilder
      desc: "[in] handle of builder object"
    - type: const $x_rtas_builder_build_op_exp_desc_t*
      name: pBuildOpDescriptor
      desc: "[in] pointer to build operation descriptor"
    - type: $x_rtas_builder_exp_properties_t*
      name: pProperties
      desc: "[in,out] query result for builder properties"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
--- #--------------------------------------------------------------------------
type: function
desc: "Checks ray tracing acceleration structure format compatibility"
version: "1.7"
class: $xDriver
name: RTASFormatCompatibilityCheckExp
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of driver object"
    - type: $x_rtas_format_exp_t
      name: rtasFormatA
      desc: "[in] operand A"
    - type: $x_rtas_format_exp_t
      name: rtasFormatB
      desc: "[in] operand B"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
returns:
    - $X_RESULT_SUCCESS:
        - "An acceleration structure built with `rtasFormatA` is compatible with devices that report `rtasFormatB`."
    - $X_RESULT_EXP_ERROR_OPERANDS_INCOMPATIBLE:
        - "An acceleration structure built with `rtasFormatA` is **not** compatible with devices that report `rtasFormatB`."
--- #--------------------------------------------------------------------------
type: function
desc: "Build ray tracing acceleration structure"
version: "1.7"
class: $xRTASBuilder
name: BuildExp
params:
    - type: $x_rtas_builder_exp_handle_t
      name: hBuilder
      desc: "[in] handle of builder object"
    - type: const $x_rtas_builder_build_op_exp_desc_t*
      name: pBuildOpDescriptor
      desc: "[in] pointer to build operation descriptor"
    - type: void*
      name: pScratchBuffer
      desc: "[in][range(0, `scratchBufferSizeBytes`)] scratch buffer to be used during acceleration structure construction"
    - type: size_t
      name: scratchBufferSizeBytes
      desc: "[in] size of scratch buffer, in bytes"
    - type: void*
      name: pRtasBuffer
      desc: "[in] pointer to destination buffer"
    - type: size_t
      name: rtasBufferSizeBytes
      desc: "[in] destination buffer size, in bytes"
    - type: $x_rtas_parallel_operation_exp_handle_t
      name: hParallelOperation
      desc: "[in][optional] handle to parallel operation object"
    - type: void*
      name: pBuildUserPtr
      desc: "[in][optional] pointer passed to callbacks"
    - type: $x_rtas_aabb_exp_t*
      name: pBounds
      desc: "[in,out][optional] pointer to destination address for acceleration structure bounds"
    - type: size_t*
      name: pRtasBufferSizeBytes
      desc: "[out][optional] updated acceleration structure size requirement, in bytes"
details:
    - >
      This function builds an acceleration structure of the scene consisting of the specified geometry information and writes the acceleration structure to the provided destination buffer. All types of geometries can get freely mixed inside a scene.
    - >
      It is the user's responsibility to manage the acceleration structure buffer allocation, de-allocation, and potential prefetching to the device memory. The required size of the acceleration structure buffer can be queried with the $xRTASBuilderGetBuildPropertiesExp function. The acceleration structure buffer must be a shared USM allocation and should be present on the host at build time. The referenced scene data (index- and vertex- buffers) can be standard host allocations, and will not be referenced into by the build acceleration structure.
    - >
      Before an acceleration structure can be built, the user must allocate the memory for the acceleration structure buffer and scratch buffer using sizes based on a query for the estimated size properties.
    - >
      When using the "worst-case" size for the acceleration structure buffer, the acceleration structure construction will never fail with $X_RESULT_EXP_RTAS_BUILD_RETRY.
    - >
      When using the "expected" size for the acceleration structure buffer, the acceleration structure construction may fail with $X_RESULT_EXP_RTAS_BUILD_RETRY. If this happens, the user may resize their acceleration structure buffer using the returned `*pRtasBufferSizeBytes` value, which will be updated with an improved size estimate that will likely result in a successful build.
    - >
      The acceleration structure construction is run on the host and is synchronous, thus after the function returns with a successful result, the acceleration structure may be used.
    - >
      All provided data buffers must be host-accessible.
    - >
      The acceleration structure buffer must be a USM allocation.
    - >
      A successfully constructed acceleration structure is entirely self-contained. There is no requirement for input data to persist beyond build completion.
    - >
      A successfully constructed acceleration structure is non-copyable.
    - >
      Acceleration structure construction may be parallelized by passing a valid handle to a parallel operation object and joining that parallel operation using $xRTASParallelOperationJoinExp with user-provided worker threads.

    - |
      **Additional Notes**
        - "The geometry infos array, geometry infos, and scratch buffer must all be standard host memory allocations."
        - "A pointer to a geometry info can be a null pointer, in which case the geometry is treated as empty."
        - "If no parallel operation handle is provided, the build is run sequentially on the current thread."
        - "A parallel operation object may only be associated with a single acceleration structure build at a time."
returns:
    - $X_RESULT_EXP_RTAS_BUILD_DEFERRED:
        - "Acceleration structure build completion is deferred to parallel operation join."
    - $X_RESULT_EXP_RTAS_BUILD_RETRY:
        - "Acceleration structure build failed due to insufficient resources, retry the build operation with a larger acceleration structure buffer allocation."
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
        - "Acceleration structure build failed due to parallel operation object participation in another build operation."
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a ray tracing acceleration structure builder object"
version: "1.7"
class: $xRTASBuilder
name: DestroyExp
params:
    - type: $x_rtas_builder_exp_handle_t
      name: hBuilder
      desc: "[in][release] handle of builder object to destroy"
details:
    - "The implementation of this function may immediately release any internal Host and Device resources associated with this builder."
    - "The application must **not** call this function from simultaneous threads with the same builder handle."
    - "The implementation of this function must be thread-safe."
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a ray tracing acceleration structure builder parallel operation object"
version: "1.7"
class: $xRTASParallelOperation
name: CreateExp
params:
    - type: $x_driver_handle_t
      name: hDriver
      desc: "[in] handle of driver object"
    - type: $x_rtas_parallel_operation_exp_handle_t*
      name: phParallelOperation
      desc: "[out] handle of parallel operation object"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
    - "The implementation must support $X_experimental_rtas_builder extension."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves ray tracing acceleration structure builder parallel operation properties"
version: "1.7"
class: $xRTASParallelOperation
name: GetPropertiesExp
params:
    - type: $x_rtas_parallel_operation_exp_handle_t
      name: hParallelOperation
      desc: "[in] handle of parallel operation object"
    - type: $x_rtas_parallel_operation_exp_properties_t*
      name: pProperties
      desc: "[in,out] query result for parallel operation properties"
details:
    - "The application must first bind the parallel operation object to a build operation before it may query the parallel operation properties. In other words, the application must first call $xRTASBuilderBuildExp with **hParallelOperation** before calling this function."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
--- #--------------------------------------------------------------------------
type: function
desc: "Joins a parallel build operation"
version: "1.7"
class: $xRTASParallelOperation
name: JoinExp
params:
    - type: $x_rtas_parallel_operation_exp_handle_t
      name: hParallelOperation
      desc: "[in] handle of parallel operation object"
details:
    - "All worker threads return the same error code for the parallel build operation upon build completion"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a ray tracing acceleration structure builder parallel operation object"
version: "1.7"
class: $xRTASParallelOperation
name: DestroyExp
params:
    - type: $x_rtas_parallel_operation_exp_handle_t
      name: hParallelOperation
      desc: "[in][release] handle of parallel operation object to destroy"
details:
    - "The implementation of this function may immediately release any internal Host and Device resources associated with this parallel operation."
    - "The application must **not** call this function from simultaneous threads with the same parallel operation handle."
    - "The implementation of this function must be thread-safe."
