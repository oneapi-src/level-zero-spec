#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Sampler"
--- #--------------------------------------------------------------------------
type: enum
desc: "Sampler addressing modes"
class: $xSampler
name: $x_sampler_address_mode_t
etors:
    - name: NONE
      value: "0"
      desc: "No coordinate modifications for out-of-bounds image access."
    - name: REPEAT
      desc: "Out-of-bounds coordinates are wrapped back around."
    - name: CLAMP
      desc: "Out-of-bounds coordinates are clamped to edge."
    - name: CLAMP_TO_BORDER
      desc: "Out-of-bounds coordinates are clamped to border color which is (0.0f, 0.0f, 0.0f, 0.0f) if image format swizzle contains alpha, otherwise (0.0f, 0.0f, 0.0f, 1.0f)."
    - name: MIRROR
      desc: "Out-of-bounds coordinates are mirrored starting from edge."
--- #--------------------------------------------------------------------------
type: enum
desc: "Sampler filtering modes"
class: $xSampler
name: $x_sampler_filter_mode_t
etors:
    - name: NEAREST
      value: "0"
      desc: "No coordinate modifications for out of bounds image access."
    - name: LINEAR
      desc: "Out-of-bounds coordinates are wrapped back around."
--- #--------------------------------------------------------------------------
type: struct
desc: "Sampler descriptor"
class: $xSampler
name: $x_sampler_desc_t
base: $x_base_desc_t
members:
    - type: "$x_sampler_address_mode_t"
      name: addressMode
      desc: "[in] Sampler addressing mode to determine how out-of-bounds coordinates are handled."
      init: "$X_SAMPLER_ADDRESS_MODE_NONE"
    - type: "$x_sampler_filter_mode_t"
      name: filterMode
      desc: "[in] Sampler filter mode to determine how samples are filtered."
      init: "$X_SAMPLER_FILTER_MODE_NEAREST"
    - type: "$x_bool_t"
      name: isNormalized
      desc: "[in] Are coordinates normalized [0, 1] or not."
      init: "true"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates sampler on the context."
class: $xSampler
name: Create
decl: static
ordinal: "0"
details:
    - "The application must only use the sampler for the device, or its sub-devices, which was provided during creation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: "const $x_sampler_desc_t*"
      name: desc
      desc: "[in] pointer to sampler descriptor"
    - type: "$x_sampler_handle_t*"
      name: phSampler
      desc: "[out] handle of the sampler"
returns:
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys sampler object"
class: $xSampler
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the sampler before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this sampler."
    - "The application must **not** call this function from simultaneous threads with the same sampler handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: "$x_sampler_handle_t"
      name: hSampler
      desc: "[in][release] handle of the sampler"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: class
desc: "c++ wrapper for sampler"
name: $xSampler
owner: $xDevice
members:
    - type: $x_sampler_handle_t
      name: handle
      desc: "[in] handle of the sample object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: "$x_sampler_desc_t"
      name: desc
      desc: "[in] sampler descriptor"
