#
# Copyright (C) 2023 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool Experimental Extension for Programmable Metrics"
version: "1.9"
--- #--------------------------------------------------------------------------
type: macro
desc: "Programmable Metrics Experimental Extension Name"
version: "1.9"
name: $T_PROGRAMMABLE_METRICS_EXP_NAME
value: '"$XT_experimental_programmable_metrics"'
--- #--------------------------------------------------------------------------
type: enum
desc: "Programmable Metrics Experimental Extension Version(s)"
version: "1.9"
name: $t_metric_programmable_exp_version_t
etors:
    - name: "1_0"
      value: "$X_MAKE_VERSION( 1, 0 )"
      desc: "version 1.0"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum count of characters in export data element name"
version: "1.9"
name: $T_MAX_PROGRAMMABLE_METRICS_ELEMENT_NAME_EXP
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum export data element description string size"
version: "1.9"
name: $T_MAX_PROGRAMMABLE_METRICS_ELEMENT_DESCRIPTION_EXP
value: "256"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric programmable name string size"
version: "1.9"
name: $T_MAX_METRIC_PROGRAMMABLE_NAME_EXP
value: "128"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric programmable description string size"
version: "1.9"
name: $T_MAX_METRIC_PROGRAMMABLE_DESCRIPTION_EXP
value: "128"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric programmable component string size"
version: "1.9"
name: $T_MAX_METRIC_PROGRAMMABLE_COMPONENT_EXP
value: "128"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum metric programmable parameter string size"
version: "1.9"
name: $T_MAX_METRIC_PROGRAMMABLE_PARAMETER_NAME_EXP
value: "128"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum value information string size"
version: "1.9"
name: $T_MAX_VALUE_INFO_CSTRING_EXP
value: "128"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of metric programmable's object"
version: "1.9"
class: $tMetricProgrammable
name: "$t_metric_programmable_exp_handle_t"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric Programmable properties queried using $tMetricProgrammableGetPropertiesExp"
version: "1.9"
class: $tMetricProgrammable
name: $t_metric_programmable_exp_properties_t
base: $t_base_properties_t
members:
    - type: char
      name: "name[$T_MAX_METRIC_PROGRAMMABLE_NAME_EXP]"
      desc: "[out] metric programmable name"
    - type: char
      name: "description[$T_MAX_METRIC_PROGRAMMABLE_DESCRIPTION_EXP]"
      desc: "[out] metric programmable description"
    - type: char
      name: "component[$T_MAX_METRIC_PROGRAMMABLE_COMPONENT_EXP]"
      desc: "[out] metric programmable component"
    - type: uint32_t
      name: "tierNumber"
      desc: "[out] tier number"
    - type: uint32_t
      name: "domain"
      desc: "[out] metric domain number."
    - type: uint32_t
      name: "parameterCount"
      desc: "[out] number of parameters in the programmable"
    - type: "$t_metric_group_sampling_type_flags_t"
      name: "samplingType"
      desc: |
            [out] metric sampling type.
            returns a combination of $t_metric_group_sampling_type_flag_t.
    - type: uint32_t
      name: "sourceId"
      desc: "[out] unique metric source identifier(within platform)to identify the HW block where the metric is collected."
--- #--------------------------------------------------------------------------
type: enum
desc: "Metric Programmable Parameter types"
version: "1.9"
class: $tMetricProgrammable
name: $t_metric_programmable_param_type_exp_t
etors:
    - name: DISAGGREGATION
      desc: "Metric is disaggregated."
    - name: LATENCY
      desc: "Metric for latency measurement."
    - name: NORMALIZATION_UTILIZATION
      desc: "Produces normalization in percent using raw_metric * 100 / cycles / HW instance_count."
    - name: NORMALIZATION_AVERAGE
      desc: "Produces normalization using raw_metric / HW instance_count."
    - name: NORMALIZATION_RATE
      desc: "Produces normalization average using raw_metric / timestamp."
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported value info types"
version: "1.9"
name: $t_value_info_type_exp_t
etors:
    - name: UINT32
      desc: "32-bit unsigned-integer"
    - name: UINT64
      desc: "64-bit unsigned-integer"
    - name: FLOAT32
      desc: "32-bit floating-point"
    - name: FLOAT64
      desc: "64-bit floating-point"
    - name: BOOL8
      desc: "8-bit boolean"
    - name: CSTRING
      desc: "C string"
    - name: UINT8
      desc: "8-bit unsigned-integer"
    - name: UINT16
      desc: "16-bit unsigned-integer"
    - name: UINT64_RANGE
      desc: "64-bit unsigned-integer range (minimum and maximum)"
--- #--------------------------------------------------------------------------
type: struct
desc: "Value info of type uint64_t range"
version: "1.9"
name: $t_value_uint64_range_exp_t
members:
    - type: uint64_t
      name: "ui64Min"
      desc: "[out] minimum value of the range"
    - type: uint64_t
      name: "ui64Max"
      desc: "[out] max value of the range"
--- #--------------------------------------------------------------------------
type: union
desc: "Union of value information"
version: "1.9"
name: $t_value_info_exp_t
members:
    - type: uint32_t
      name: "ui32"
      desc: "[out] 32-bit unsigned-integer"
    - type: uint64_t
      name: "ui64"
      desc: "[out] 64-bit unsigned-integer"
    - type: float
      name: "fp32"
      desc: "[out] 32-bit floating-point"
    - type: double
      name: "fp64"
      desc: "[out] 64-bit floating-point"
    - type: $x_bool_t
      name: "b8"
      desc: "[out] 8-bit boolean"
    - type: uint8_t
      name: "ui8"
      desc: "[out] 8-bit unsigned integer"
    - type: uint16_t
      name: "ui16"
      desc: "[out] 16-bit unsigned integer"
    - type: char
      name: "cString[$T_MAX_VALUE_INFO_CSTRING_EXP]"
      desc: "[out] cString"
    - type: $t_value_uint64_range_exp_t
      name: "ui64Range"
      desc: "[out] minimum and maximum value of the range"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric Programmable parameter information"
version: "1.9"
class: $tMetricProgrammable
name: $t_metric_programmable_param_info_exp_t
base: $t_base_desc_t
members:
    - type: $t_metric_programmable_param_type_exp_t
      name: "type"
      desc: "[out] programmable parameter type"
    - type: char
      name: "name[$T_MAX_METRIC_PROGRAMMABLE_PARAMETER_NAME_EXP]"
      desc: "[out] metric programmable parameter name"
    - type: $t_value_info_type_exp_t
      name: "valueInfoType"
      desc: "[out] value info type"
    - type: $t_value_t
      name: "defaultValue"
      desc: "[out] default value for the parameter"
    - type: uint32_t
      name: "valueInfoCount"
      desc: "[out] count of $t_metric_programmable_param_value_info_exp_t"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric Programmable parameter value information"
version: "1.9"
class: $tMetricProgrammable
name: $t_metric_programmable_param_value_info_exp_t
base: $t_base_desc_t
members:
    - type: $t_value_info_exp_t
      name: "valueInfo"
      desc: "[out] information about the parameter value"
--- #--------------------------------------------------------------------------
type: struct
desc: "Metric Programmable parameter value"
version: "1.9"
class: $tMetricProgrammable
name: $t_metric_programmable_param_value_exp_t
members:
    - type: $t_value_t
      name: "value"
      desc: "[in] parameter value"
--- #--------------------------------------------------------------------------
type: function
desc: "Query and get the available metric programmable handles."
version: "1.9"
class: $tMetricProgrammable
name: GetExp
decl: static
details:
    - "Query the available programmable handles using *pCount = 0."
    - "Returns all programmable metric handles available in the device."
    - "The application may call this function from simultaneous threads."
params:
    - type: "$t_device_handle_t"
      name: hDevice
      desc: "[in] handle of the device"
    - type: uint32_t*
      name: pCount
      desc: |
            [in,out] pointer to the number of metric programmable handles.
            if count is zero, then the driver shall update the value with the total number of metric programmable handles available.
            if count is greater than the number of metric programmable handles available, then the driver shall update the value with the correct number of metric programmable handles available.
    - type: "$t_metric_programmable_exp_handle_t*"
      name: phMetricProgrammables
      desc: |
            [in,out][optional][range(0, *pCount)] array of handle of metric programmables.
            if count is less than the number of metric programmables available, then driver shall only retrieve that number of metric programmables.
--- #--------------------------------------------------------------------------
type: function
desc: "Get the properties of the metric programmable."
version: "1.9"
class: $tMetricProgrammable
name: GetPropertiesExp
decl: static
details:
    - "Returns the properties of the metric programmable."
params:
    - type: $t_metric_programmable_exp_handle_t
      name: hMetricProgrammable
      desc: "[in] handle of the metric programmable"
    - type: "$t_metric_programmable_exp_properties_t*"
      name: pProperties
      desc: "[in,out] properties of the metric programmable"
--- #--------------------------------------------------------------------------
type: function
desc: "Get the information about the parameters of the metric programmable."
version: "1.9"
class: $tMetricProgrammable
name: GetParamInfoExp
decl: static
details:
    - "Returns information about the parameters of the metric programmable handle."
params:
    - type: $t_metric_programmable_exp_handle_t
      name: hMetricProgrammable
      desc: "[in] handle of the metric programmable"
    - type: "uint32_t*"
      name: pParameterCount
      desc: |
            [in,out] count of the parameters to retrieve parameter info.
            if value pParameterCount is greater than count of parameters available, then pParameterCount will be updated with count of parameters available.
            The count of parameters available can be queried using $tMetricProgrammableGetPropertiesExp.
    - type: "$t_metric_programmable_param_info_exp_t*"
      name: pParameterInfo
      desc: |
            [in,out][range(1, *pParameterCount)] array of parameter info.
            if parameterCount is less than the number of parameters available, then driver shall only retrieve that number of parameter info.
--- #--------------------------------------------------------------------------
type: function
desc: "Get the information about the parameter value of the metric programmable."
version: "1.9"
class: $tMetricProgrammable
name: GetParamValueInfoExp
decl: static
details:
    - "Returns the value-information about the parameter at the specific ordinal of the metric programmable handle."
params:
    - type: $t_metric_programmable_exp_handle_t
      name: hMetricProgrammable
      desc: "[in] handle of the metric programmable"
    - type: uint32_t
      name: parameterOrdinal
      desc: "[in] ordinal of the parameter in the metric programmable"
    - type: "uint32_t*"
      name: pValueInfoCount
      desc: |
            [in,out] count of parameter value information to retrieve.
            if value at pValueInfoCount is greater than count of value info available, then pValueInfoCount will be updated with count of value info available.
            The count of parameter value info available can be queried using $tMetricProgrammableGetParamInfoExp.
    - type: "$t_metric_programmable_param_value_info_exp_t*"
      name: pValueInfo
      desc: |
            [in,out][range(1, *pValueInfoCount)] array of parameter value info.
            if pValueInfoCount is less than the number of value info available, then driver shall only retrieve that number of value info.
--- #--------------------------------------------------------------------------
type: function
desc: "Create metric handles by applying parameter values on the metric programmable handle."
version: "1.9"
class: $tMetric
name: CreateFromProgrammableExp
decl: static
details:
    - "Multiple parameter values could be used to prepare a metric."
    - "If parameterCount = 0, the default value of the metric programmable would be used for all parameters."
    - "The implementation can post-fix a C string to the metric name and description, based on the parmeter values chosen."
    - "$tMetricProgrammableGetParamInfoExp() returns a list of parameters in a defined order."
    - "Therefore, the list of values passed in to the API should respect the same order such that the desired parameter is set with expected value"
params:
    - type: $t_metric_programmable_exp_handle_t
      name: hMetricProgrammable
      desc: "[in] handle of the metric programmable"
    - type: $t_metric_programmable_param_value_exp_t*
      name: pParameterValues
      desc: "[in] list of parameter values to be set."
    - type: uint32_t
      name: parameterCount
      desc: "[in] Count of parameters to set."
    - type: const char
      name: "name[ZET_MAX_METRIC_NAME]"
      desc: "[in] Metric name to be used."
    - type: const char
      name: "description[ZET_MAX_METRIC_DESCRIPTION]"
      desc: "[in] Metric description to be used."
    - type: "uint32_t*"
      name: pMetricHandleCount
      desc: |
            [in,out] Pointer to the number of metric handles.
            if count is zero, then the driver shall update the value with the number of metric handles available for this programmable.
            if count is greater than the number of metric handles available, then the driver shall update the value with the correct number of metric handles available.
    - type: "$t_metric_handle_t*"
      name: phMetricHandles
      desc: |
            [in,out][optional][range(0,*pMetricHandleCount)] array of handle of metrics.
            if count is less than the number of metrics available, then driver shall only retrieve that number of metric handles.
--- #--------------------------------------------------------------------------
type: function
desc: "Create metric group handle."
version: "1.9"
class: $tMetricGroup
name: CreateExp
decl: static
details:
    - "Metrics from $tMetricCreateFromProgrammableExp() could be added to the created metric group."
params:
    - type: $t_device_handle_t
      name: hDevice
      desc: "[in] handle of the device"
    - type: const char
      name: name[ZET_MAX_METRIC_GROUP_NAME]
      desc: "[in] Metric group name."
    - type: const char
      name: description[ZET_MAX_METRIC_GROUP_DESCRIPTION]
      desc: "[in] Metric group description."
    - type: $t_metric_group_sampling_type_flags_t
      name: samplingType
      desc: "[in] Sampling type for the metric group."
    - type: $t_metric_group_handle_t*
      name: phMetricGroup
      desc: "[in,out] Created Metric group handle"
--- #--------------------------------------------------------------------------
type: function
desc: "Add a metric handle to the metric group handle created using $tMetricGroupCreateExp."
version: "1.9"
class: $tMetricGroup
name: AddMetricExp
decl: static
details:
    - "Reasons for failing to add the metric could be queried using pErrorString"
    - "Multiple additions of same metric would add the metric only once to the hMetricGroup"
    - "Metric handles from multiple domains may be used in a single metric group."
    - "Metric handles from different sourceIds (refer $t_metric_programmable_exp_properties_t) are not allowed in a single metric group."
params:
    - type: $t_metric_group_handle_t 
      name: hMetricGroup
      desc: "[in] Handle of the metric group"
    - type: $t_metric_handle_t
      name: hMetric
      desc: "[in] Metric to be added to the group."
    - type: "size_t *"
      name: pErrorStringSize
      desc: |
            [in,out][optional] Size of the error string to query, if an error was reported during adding the metric handle.
            if *pErrorStringSize is zero, then the driver shall update the value with the size of the error string in bytes.
    - type: "char*"
      name: pErrorString
      desc: |
            [in,out][optional][range(0, *pErrorStringSize)] Error string.
            if *pErrorStringSize is less than the length of the error string available, then driver shall only retrieve that length of error string.
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "If a Metric handle from a pre-defined metric group is requested to be added."
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
        - "If the metric group is currently activated."
--- #--------------------------------------------------------------------------
type: function
desc: "Remove a metric from the metric group handle created using $tMetricGroupCreateExp."
version: "1.9"
class: $tMetricGroup
name: RemoveMetricExp
decl: static
details:
    - "Remove an already added metric handle from the metric group."
params:
    - type: $t_metric_group_handle_t
      name: hMetricGroup
      desc: "[in] Handle of the metric group"
    - type: $t_metric_handle_t
      name: hMetric
      desc: "[in] Metric handle to be removed from the metric group."
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "If trying to remove a metric not previously added to the metric group"
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
        - "If the metric group is currently activated"
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "If the input metric group is a pre-defined metric group"
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a created metric group using $tMetricGroupCreateExp, so that it can be activated."
version: "1.9"
class: $tMetricGroup
name: CloseExp
decl: static
details:
    - "Finalizes the $tMetricGroupAddMetricExp and $tMetricGroupRemoveMetricExp operations on the metric group."
    - "This is a necessary step before activation of the created metric group."
    - "Add / Remove of metrics is possible after $tMetricGroupCloseExp. However, a call to $tMetricGroupCloseExp is necessary after modifying the metric group."
    - "Implementations could choose to add new metrics to the group during $tMetricGroupCloseExp, which are related and might add value to the metrics already added by the application"
    - "Applications can query the list of metrics in the metric group using $tMetricGet"
params:
    - type: $t_metric_group_handle_t
      name: hMetricGroup
      desc: "[in] Handle of the metric group"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "If the input metric group is a pre-defined metric group"
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
       - "If the metric group is currently activated"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroy a metric group created using $tMetricGroupCreateExp."
version: "1.9"
class: $tMetricGroup
name: DestroyExp
decl: static
details:
    - "Metric handles created using $tMetricCreateFromProgrammableExp and are part of the metricGroup are not destroyed."
    - "It is necessary to call $tMetricDestroyExp for each of the metric handles (created from $tMetricCreateFromProgrammableExp) to destroy them."
params:
    - type: $t_metric_group_handle_t 
      name: hMetricGroup
      desc: "[in] Handle of the metric group to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "If trying to destroy a pre-defined metric group"
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
      - "If trying to destroy an activated metric group"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroy a metric created using $tMetricCreateFromProgrammableExp."
version: "1.9"
class: $tMetric
name: DestroyExp
decl: static
details:
    - "If a metric is added to a metric group, the metric has to be removed using $tMetricGroupRemoveMetricExp before it can be destroyed."
params:
    - type: $t_metric_handle_t
      name: hMetric
      desc: "[in] Handle of the metric to destroy"
returns:
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
        - "If trying to destroy a metric from pre-defined metric group"
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
        - "If trying to destroy a metric currently added to a metric group"