#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero APIs for Command List"
ordinal: "5"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported command list creation flags"
class: $xCommandList
name: $x_command_list_flags_t
etors:
    - name: RELAXED_ORDERING
      desc: |
            driver may reorder commands (e.g., kernels, copies) between barriers and synchronization primitives.
            using this flag may increase Host overhead of $xCommandListClose.
            therefore, this flag should **not** be set for low-latency usage-models.
    - name: MAXIMIZE_THROUGHPUT
      desc: |
            driver may perform additional optimizations that increase execution throughput. 
            using this flag may increase Host overhead of $xCommandListClose and $xCommandQueueExecuteCommandLists.
            therefore, this flag should **not** be set for low-latency usage-models.
    - name: EXPLICIT_ONLY
      desc: |
            command list should be optimized for submission to a single command queue and device engine.
            driver **must** disable any implicit optimizations for distributing work across multiple engines.
            this flag should be used when applications want full control over multi-engine submission and scheduling.
    - name: IN_ORDER
      version: "1.7"
      desc: |
            commands appended to this command list are executed in-order, with driver implementation
            enforcing dependencies between them. Application is not required to have the signal event
            of a given command being the wait event of the next to define an in-order list, and
            application is allowed to pass signal and wait events to each appended command to implement
            more complex dependency graphs. Cannot be combined with $X_COMMAND_LIST_FLAG_RELAXED_ORDERING.
    - name: EXP_CLONEABLE
      version: "1.9"
      desc: "this command list may be cloned using $xCommandListCreateCloneExp after $xCommandListClose."
--- #--------------------------------------------------------------------------
type: struct
desc: "Command List descriptor"
class: $xCommandList
name: $x_command_list_desc_t
base: $x_base_desc_t
members:
    - type: uint32_t
      name: commandQueueGroupOrdinal
      desc: "[in] command queue group ordinal to which this command list will be submitted"
    - type: $x_command_list_flags_t
      name: flags
      desc: |
            [in] usage flags.
            must be 0 (default) or a valid combination of $x_command_list_flag_t;
            default behavior may use implicit driver-based heuristics to balance latency and throughput.
      init: "0"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates a command list on the context."
class: $xCommandList
name: Create
decl: static
ordinal: "0"
details:
    - "A command list represents a sequence of commands for execution on a command queue."
    - "The command list is created in the 'open' state."
    - "The application must only use the command list for the device, or its sub-devices, which was provided during creation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_list_desc_t*"
      name: desc
      desc: "[in] pointer to command list descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
--- #--------------------------------------------------------------------------
type: function
desc: "Creates an immediate command list on the context."
class: $xCommandList
name: CreateImmediate
decl: static
ordinal: "0"
details:
    - "An immediate command list is used for low-latency submission of commands."
    - "An immediate command list creates an implicit command queue."
    - "Immediate command lists must not be passed to $xCommandQueueExecuteCommandLists."
    - "Commands appended into an immediate command list may execute synchronously, by blocking until the command is complete."
    - "The command list is created in the 'open' state and never needs to be closed."
    - "The application must only use the command list for the device, or its sub-devices, which was provided during creation."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_context_handle_t
      name: hContext
      desc: "[in] handle of the context object"
    - type: $x_device_handle_t
      name: hDevice
      desc: "[in] handle of the device object"
    - type: "const $x_command_queue_desc_t*"
      name: altdesc
      desc: "[in] pointer to command queue descriptor"
    - type: $x_command_list_handle_t*
      name: phCommandList
      desc: "[out] pointer to handle of command list object created"
--- #--------------------------------------------------------------------------
type: function
desc: "Destroys a command list."
class: $xCommandList
name: Destroy
decl: static
ordinal: "0"
details:
    - "The application must ensure the device is not currently referencing the command list before it is deleted."
    - "The implementation of this function may immediately free all Host and Device allocations associated with this command list."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function must be thread-safe."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in][release] handle of command list object to destroy"
returns:
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE
--- #--------------------------------------------------------------------------
type: function
desc: "Closes a command list; ready to be executed by a command queue."
class: $xCommandList
name: Close
ordinal: "1"
details:
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to close"
--- #--------------------------------------------------------------------------
type: function
desc: "Reset a command list to initial (empty) state; ready for appending commands."
class: $xCommandList
name: Reset
ordinal: "1"
details:
    - "The application must ensure the device is not currently referencing the command list before it is reset"
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of command list object to reset"
--- #--------------------------------------------------------------------------
type: function
desc: "Appends a memory write of the device's global timestamp value into a command list."
class: $xCommandList
name: AppendWriteGlobalTimestamp
details:
    - "The application must ensure the events are accessible by the device on which the command list was created."
    - "The timestamp frequency can be queried from the `timerResolution` member of $x_device_properties_t."
    - "The number of valid bits in the timestamp value can be queried from the `timestampValidBits` member of $x_device_properties_t."
    - "The application must ensure the memory pointed to by dstptr is accessible by the device on which the command list was created."
    - "The application must ensure the command list and events were created, and the memory was allocated, on the same context."
    - "The application must **not** call this function from simultaneous threads with the same command list handle."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the command list"
    - type: "uint64_t*"
      name: dstptr
      desc: "[in,out] pointer to memory where timestamp value will be written; must be 8byte-aligned."
    - type: $x_event_handle_t
      name: hSignalEvent
      desc: "[in][optional] handle of the event to signal on completion"
    - type: uint32_t
      name: numWaitEvents
      desc: "[in][optional] number of events to wait on before executing query; must be 0 if `nullptr == phWaitEvents`"
    - type: "$x_event_handle_t*"
      name: phWaitEvents
      desc: "[in][optional][range(0, numWaitEvents)] handle of the events to wait on before executing query"
returns:
    - $X_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`(nullptr == phWaitEvents) && (0 < numWaitEvents)`"
--- #--------------------------------------------------------------------------
type: function
desc: "Synchronizes an immediate command list by waiting on the host for the completion of all commands previously submitted to it."
class: $xCommandList
name: HostSynchronize
version: "1.6"
details:
    - "The application must call this function only with command lists created with $xCommandListCreateImmediate."
    - |
      Waiting on one immediate command list shall not block the concurrent execution of commands appended to other
      immediate command lists created with either a different ordinal or different index.
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_command_list_handle_t
      name: hCommandList
      desc: "[in] handle of the immediate command list"
    - type: uint64_t
      name: timeout
      desc: |
            [in] if non-zero, then indicates the maximum time (in nanoseconds) to yield before returning $X_RESULT_SUCCESS or $X_RESULT_NOT_READY;
            if zero, then immediately returns the status of the immediate command list;
            if `UINT64_MAX`, then function will not return until complete or device is lost.
            Due to external dependencies, timeout may be rounded to the closest value allowed by the accuracy of those dependencies.
returns:
    - $X_RESULT_NOT_READY:
       - "timeout expired"
    - $X_RESULT_ERROR_INVALID_ARGUMENT:
       - "handle does not correspond to an immediate command list"
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for command list"
name: $xCommandList
owner: $xDevice
members:
    - type: $x_command_list_handle_t
      name: handle
      desc: "[in] handle of command list object"
    - type: $xDevice*
      name: pDevice
      desc: "[in] pointer to owner object"
    - type: $x_command_list_desc_t
      name: desc
      desc: "[in] descriptor of the command list object"
