#
# Copyright (C) 2019-2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Level-Zero Tool APIs for System Resource Management (Sysman) - Device management"
ordinal: "2"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves sysman devices within a sysman driver"
version: "1.5"
class: $sDevice
name: Get
decl: static
ordinal: "0"
details:
    - "Multiple calls to this function will return identical sysman device handles, in the same order."
    - "1.5": "The number and order of handles returned from this function is NOT affected by the $X_AFFINITY_MASK or $X_ENABLE_PCI_ID_DEVICE_ORDER environment variables."
      "1.7": "The number and order of handles returned from this function is NOT affected by the $X_AFFINITY_MASK, $X_ENABLE_PCI_ID_DEVICE_ORDER, or $X_FLAT_DEVICE_HIERARCHY environment variables."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_driver_handle_t
      name: hDriver
      desc: "[in] handle of the sysman driver instance"
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of sysman devices.
            if count is zero, then the driver shall update the value with the total number of sysman devices available.
            if count is greater than the number of sysman devices available, then the driver shall update the value with the correct number of sysman devices available.
    - type: "$s_device_handle_t*"
      name: phDevices
      desc: |
            [in,out][optional][range(0, *pCount)] array of handle of sysman devices.
            if count is less than the number of sysman devices available, then driver shall only retrieve that number of sysman devices.
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum number of characters in string properties."
name: $S_STRING_PROPERTY_SIZE
value: "64"
--- #--------------------------------------------------------------------------
type: macro
desc: "Maximum device universal unique id (UUID) size in bytes."
name: $S_MAX_UUID_SIZE
value: "16"
--- #--------------------------------------------------------------------------
type: enum
desc: "Types of accelerator engines"
class: $sDevice
name: $s_engine_type_flags_t
etors:
    - name: OTHER
      desc: "Undefined types of accelerators."
    - name: COMPUTE
      desc: "Engines that process compute kernels only (no 3D content)."
    - name: 3D
      desc: "Engines that process 3D content only (no compute kernels)."
    - name: MEDIA
      desc: "Engines that process media workloads."
    - name: DMA
      desc: "Engines that copy blocks of data."
    - name: RENDER
      desc: "Engines that can process both 3D content and compute kernels."
--- #--------------------------------------------------------------------------
type: enum
desc: "Device repair status"
class: $sDevice
name: $s_repair_status_t
etors:
    - name: UNSUPPORTED
      value: "0"
      desc: "The device does not support in-field repairs."
    - name: NOT_PERFORMED
      desc: "The device has never been repaired."
    - name: PERFORMED
      desc: "The device has been repaired."
--- #--------------------------------------------------------------------------
type: enum
desc: "Device reset reasons"
class: $sDevice
name: $s_reset_reason_flags_t
etors:
    - name: WEDGED
      desc: "The device needs to be reset because one or more parts of the hardware is wedged"
    - name: REPAIR
      desc: "The device needs to be reset in order to complete in-field repairs"
--- #--------------------------------------------------------------------------
type: enum
desc: "Device reset type"
version: "1.7"
class: $sDevice
name: $s_reset_type_t
etors:
    - name: WARM
      desc: "Apply warm reset"
    - name: COLD
      desc: "Apply cold reset"
    - name: FLR
      desc: "Apply FLR reset"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device state"
class: $sDevice
name: $s_device_state_t
base: $s_base_state_t
members:
    - type: $s_reset_reason_flags_t
      name: reset
      desc: |
            [out] Indicates if the device needs to be reset and for what reasons.
            returns 0 (none) or combination of $s_reset_reason_flag_t
    - type: $s_repair_status_t
      name: repaired
      desc: "[out] Indicates if the device has been repaired"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device reset properties"
version: "1.7"
class: $sDevice
name: $s_reset_properties_t
base: $s_base_properties_t
members:
    - type: ze_bool_t
      name: force
      desc: |
            [in] If set to true, all applications that are currently using the device will be forcibly killed.
    - type: $s_reset_type_t
      name: resetType
      desc: "[in] Type of reset needs to be performed"
--- #--------------------------------------------------------------------------
type: struct
desc: "Device universal unique id (UUID)"
version: "1.7"
class: $sDevice
name: $s_uuid_t
members:
   - type: uint8_t
     name: "id[$S_MAX_UUID_SIZE]"
     desc: "[out] opaque data representing a device UUID"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device types"
version: "1.7"
class: $sDevice
name: $s_device_type_t
etors:
    - name: GPU
      value: "1"
      desc: "Graphics Processing Unit"
    - name: CPU
      desc: "Central Processing Unit"
    - name: FPGA
      desc: "Field Programmable Gate Array"
    - name: MCA
      desc: "Memory Copy Accelerator"
    - name: VPU
      desc: "Vision Processing Unit"
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported device property flags"
version: "1.7"
class: $sDevice
name: $s_device_property_flags_t
etors:
    - name: INTEGRATED
      desc: "Device is integrated with the Host."
    - name: SUBDEVICE
      desc: "Device handle used for query represents a sub-device."
    - name: ECC
      desc: "Device supports error correction memory access."
    - name: ONDEMANDPAGING
      desc: "Device supports on-demand page-faulting."
--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties"
class: $sDevice
name: $s_device_properties_t
base: $s_base_properties_t
members:
    - type: $x_device_properties_t
      name: core
      desc:
            "1.0": "[out] Core device properties"
            "1.7": "[out] (Deprecated, use $s_uuid_t in the extended structure) Core device properties"
    - type: uint32_t
      name: "numSubdevices"
      desc: "[out] Number of sub-devices. A value of 0 indicates that this device doesn't have sub-devices."
    - type: char
      name: "serialNumber[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Manufacturing serial number (NULL terminated string value). This value is intended to reflect the Part ID/SoC ID assigned by manufacturer that is unique for a SoC. Will be set to the string \"unknown\" if this cannot be determined for the device."
    - type: char
      name: "boardNumber[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Manufacturing board number (NULL terminated string value). Alternatively \"boardSerialNumber\", this value is intended to reflect the string printed on board label by manufacturer. Will be set to the string \"unknown\" if this cannot be determined for the device."
    - type: char
      name: "brandName[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Brand name of the device (NULL terminated string value). Will be set to the string \"unknown\" if this cannot be determined for the device."
    - type: char
      name: "modelName[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Model name of the device (NULL terminated string value). Will be set to the string \"unknown\" if this cannot be determined for the device."
    - type: char
      name: "vendorName[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Vendor name of the device (NULL terminated string value). Will be set to the string \"unknown\" if this cannot be determined for the device."
    - type: char
      name: "driverVersion[$S_STRING_PROPERTY_SIZE]"
      desc: "[out] Installed driver version (NULL terminated string value). Will be set to the string \"unknown\" if this cannot be determined for the device."
--- #--------------------------------------------------------------------------
type: struct
desc: "Device properties"
version: "1.7"
class: $sDevice
name: $s_device_ext_properties_t
base: $s_base_properties_t
members:
    - type: $s_uuid_t
      name: uuid
      desc: "[out] universal unique identifier. Note: uuid obtained from Sysman API is the same as from core API. Subdevices will have their own uuid."
    - type: $s_device_type_t
      name: type
      desc: "[out] generic device type"
    - type: $s_device_property_flags_t
      name: flags
      desc: "[out] 0 (none) or a valid combination of $s_device_property_flag_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Get properties about the device"
class: $sDevice
name: GetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_device_properties_t*
      name: pProperties
      desc: "[in,out] Structure that will contain information about the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Get information about the state of the device - if a reset is required, reasons for the reset and if the device has been repaired"
class: $sDevice
name: GetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_device_state_t*
      name: pState
      desc: "[in,out] Structure that will contain information about the device."
--- #--------------------------------------------------------------------------
type: function
desc: "Reset device"
class: $sDevice
name: Reset
details:
    - "Performs a PCI bus reset of the device. This will result in all current device state being lost."
    - "All applications using the device should be stopped before calling this function."
    - "If the force argument is specified, all applications using the device will be forcibly killed."
    - "The function will block until the device has restarted or an implementation defined timeout occurred waiting for the reset to complete."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle for the device"
    - type: $x_bool_t
      name: force
      desc: "[in] If set to true, all applications that are currently using the device will be forcibly killed."
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to perform this operation."
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
        - "Reset cannot be performed because applications are using this device."
    - $X_RESULT_ERROR_UNKNOWN:
        - "There were problems unloading the device driver, performing a bus reset or reloading the device driver."

--- #--------------------------------------------------------------------------
type: function
desc: "Reset device extension"
version: "1.7"
class: $sDevice
name: ResetExt
details:
    - "Performs a PCI bus reset of the device. This will result in all current device state being lost."
    - "Prior to calling this function, user is responsible for closing applications using the device unless force argument is specified."
    - "If the force argument is specified, all applications using the device will be forcibly killed."
    - "The function will block until the device has restarted or a implementation specific timeout occurred waiting for the reset to complete."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle for the device"
    - type: "$s_reset_properties_t*"
      name: pProperties
      desc: "[in] Device reset properties to apply"
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to perform this operation."
    - $X_RESULT_ERROR_HANDLE_OBJECT_IN_USE:
        - "Reset cannot be performed because applications are using this device."
    - $X_RESULT_ERROR_UNKNOWN:
        - "There were problems unloading the device driver, performing a bus reset or reloading the device driver."

--- #--------------------------------------------------------------------------
type: struct
desc: "Contains information about a process that has an open connection with this device"
class: $sDevice
name: $s_process_state_t
base: $s_base_state_t
details:
    - "The application can use the process ID to query the OS for the owner and the path to the executable."
members:
    - type: uint32_t
      name: "processId"
      desc: "[out] Host OS process ID."
    - type: uint64_t
      name: "memSize"
      desc: "[out] Device memory size in bytes allocated by this process (may not necessarily be resident on the device at the time of reading)."
    - type: uint64_t
      name: "sharedSize"
      desc: "[out] The size of shared device memory mapped into this process (may not necessarily be resident on the device at the time of reading)."
    - type: $s_engine_type_flags_t
      name: "engines"
      desc: "[out] Bitfield of accelerator engine types being used by this process."
--- #--------------------------------------------------------------------------
type: function
desc: "Get information about host processes using the device"
class: $sDevice
name: ProcessesGetState
details:
    - "The number of processes connected to the device is dynamic. This means that between a call to determine the value of pCount and the subsequent call, the number of processes may have increased or decreased. It is recommended that a large array be passed in so as to avoid receiving the error $X_RESULT_ERROR_INVALID_SIZE. Also, always check the returned value in pCount since it may be less than the earlier call to get the required array size."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle for the device"
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of processes.
            if count is zero, then the driver shall update the value with the total number of processes currently attached to the device.
            if count is greater than the number of processes currently attached to the device, then the driver shall update the value with the correct number of processes.
    - type: "$s_process_state_t*"
      name: pProcesses
      desc: |
            [in,out][optional][range(0, *pCount)] array of process information.
            if count is less than the number of processes currently attached to the device, then the driver shall only retrieve information about that number of processes. In this case, the return code will $X_RESULT_ERROR_INVALID_SIZE.
returns:
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "The provided value of pCount is not big enough to store information about all the processes currently attached to the device."

--- #--------------------------------------------------------------------------
type: struct
desc: "PCI address"
class: $sDevice
name: $s_pci_address_t
members:
    - type: uint32_t
      name: "domain"
      desc: "[out] BDF domain"
    - type: uint32_t
      name: "bus"
      desc: "[out] BDF bus"
    - type: uint32_t
      name: "device"
      desc: "[out] BDF device"
    - type: uint32_t
      name: "function"
      desc: "[out] BDF function"
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI speed"
class: $sDevice
name: $s_pci_speed_t
members:
    - type: int32_t
      name: "gen"
      desc: "[out] The link generation. A value of -1 means that this property is unknown."
    - type: int32_t
      name: "width"
      desc: "[out] The number of lanes. A value of -1 means that this property is unknown."
    - type: int64_t
      name: "maxBandwidth"
      desc: "[out] The maximum bandwidth in bytes/sec (sum of all lanes). A value of -1 means that this property is unknown."
--- #--------------------------------------------------------------------------
type: struct
desc: "Static PCI properties"
class: $sDevice
name: $s_pci_properties_t
base: $s_base_properties_t
members:
    - type: $s_pci_address_t
      name: "address"
      desc: "[out] The BDF address"
    - type: $s_pci_speed_t
      name: "maxSpeed"
      desc: "[out] Fastest port configuration supported by the device (sum of all lanes)"
    - type: $x_bool_t
      name: "haveBandwidthCounters"
      desc: "[out] Indicates whether the `rxCounter` and `txCounter` members of $s_pci_stats_t will have valid values"
    - type: $x_bool_t
      name: "havePacketCounters"
      desc: "[out] Indicates whether the `packetCounter` member of $s_pci_stats_t will have a valid value"
    - type: $x_bool_t
      name: "haveReplayCounters"
      desc: "[out] Indicates whether the `replayCounter` member of $s_pci_stats_t will have a valid value"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI link status"
class: $sDevice
name: $s_pci_link_status_t
etors:
    - name: UNKNOWN
      value: "0"
      desc: "The link status could not be determined"
    - name: GOOD
      desc: "The link is up and operating as expected"
    - name: QUALITY_ISSUES
      desc: "The link is up but has quality and/or bandwidth degradation"
    - name: STABILITY_ISSUES
      desc: "The link has stability issues and preventing workloads making forward progress"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI link quality degradation reasons"
class: $sDevice
name: $s_pci_link_qual_issue_flags_t
etors:
    - name: REPLAYS
      desc: "A significant number of replays are occurring"
    - name: SPEED
      desc: "There is a degradation in the maximum bandwidth of the link"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI link stability issues"
class: $sDevice
name: $s_pci_link_stab_issue_flags_t
etors:
    - name: RETRAINING
      desc: "Link retraining has occurred to deal with quality issues"
--- #--------------------------------------------------------------------------
type: struct
desc: "Dynamic PCI state"
class: $sDevice
name: $s_pci_state_t
base: $s_base_state_t
members:
    - type: $s_pci_link_status_t
      name: "status"
      desc: "[out] The current status of the port"
    - type: $s_pci_link_qual_issue_flags_t
      name: "qualityIssues"
      desc: |
            [out] If status is $S_PCI_LINK_STATUS_QUALITY_ISSUES, 
            then this gives a combination of $s_pci_link_qual_issue_flag_t for quality issues that have been detected;
            otherwise, 0 indicates there are no quality issues with the link at this time."
    - type: $s_pci_link_stab_issue_flags_t
      name: "stabilityIssues"
      desc: |
            [out] If status is $S_PCI_LINK_STATUS_STABILITY_ISSUES, 
            then this gives a combination of $s_pci_link_stab_issue_flag_t for reasons for the connection instability;
            otherwise, 0 indicates there are no connection stability issues at this time."
    - type: $s_pci_speed_t
      name: "speed"
      desc: "[out] The current port configure speed"
--- #--------------------------------------------------------------------------
type: enum
desc: "PCI bar types"
class: $sDevice
name: $s_pci_bar_type_t
etors:
    - name: MMIO
      value: "0"
      desc: "MMIO registers"
    - name: ROM
      desc: "ROM aperture"
    - name: MEM
      desc: "Device memory"
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties of a pci bar"
class: $sDevice
name: $s_pci_bar_properties_t
base: $s_base_properties_t
members:
    - type: $s_pci_bar_type_t
      name: "type"
      desc: "[out] The type of bar"
    - type: uint32_t
      name: "index"
      desc: "[out] The index of the bar"
    - type: uint64_t
      name: "base"
      desc: "[out] Base address of the bar."
    - type: uint64_t
      name: "size"
      desc: "[out] Size of the bar."
--- #--------------------------------------------------------------------------
type: struct
desc: "Properties of a pci bar, including the resizable bar."
version: "1.2"
class: $sDevice
name: $s_pci_bar_properties_1_2_t
base: $s_base_properties_t
members:
    - type: $s_pci_bar_type_t
      name: "type"
      desc: "[out] The type of bar"
    - type: uint32_t
      name: "index"
      desc: "[out] The index of the bar"
    - type: uint64_t
      name: "base"
      desc: "[out] Base address of the bar."
    - type: uint64_t
      name: "size"
      desc: "[out] Size of the bar."
    - type: $x_bool_t
      name: resizableBarSupported
      desc: "[out] Support for Resizable Bar on this device."
    - type: $x_bool_t
      name: resizableBarEnabled
      desc: "[out] Resizable Bar enabled on this device"
--- #--------------------------------------------------------------------------
type: struct
desc: "PCI stats counters"
class: $sDevice
name: $s_pci_stats_t
details:
    - "Percent replays is calculated by taking two snapshots (s1, s2) and using the equation: %replay = 10^6 * (s2.replayCounter - s1.replayCounter) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
    - "Percent throughput is calculated by taking two snapshots (s1, s2) and using the equation: %bw = 10^6 * ((s2.rxCounter - s1.rxCounter) + (s2.txCounter - s1.txCounter)) / (s2.maxBandwidth * (s2.timestamp - s1.timestamp))"
members:
    - type: uint64_t
      name: "timestamp"
      desc: |
            [out] Monotonic timestamp counter in microseconds when the measurement was made.
            This timestamp should only be used to calculate delta time between snapshots of this structure.
            Never take the delta of this timestamp with the timestamp from a different structure since they are not guaranteed to have the same base.
            The absolute value of the timestamp is only valid during within the application and may be different on the next execution.
    - type: uint64_t
      name: "replayCounter"
      desc: "[out] Monotonic counter for the number of replay packets (sum of all lanes). Will always be 0 when the `haveReplayCounters` member of $s_pci_properties_t is FALSE."
    - type: uint64_t
      name: "packetCounter"
      desc: "[out] Monotonic counter for the number of packets (sum of all lanes). Will always be 0 when the `havePacketCounters` member of $s_pci_properties_t is FALSE."
    - type: uint64_t
      name: "rxCounter"
      desc: "[out] Monotonic counter for the number of bytes received (sum of all lanes). Will always be 0 when the `haveBandwidthCounters` member of $s_pci_properties_t is FALSE."
    - type: uint64_t
      name: "txCounter"
      desc: "[out] Monotonic counter for the number of bytes transmitted (including replays) (sum of all lanes). Will always be 0 when the `haveBandwidthCounters` member of $s_pci_properties_t is FALSE."
    - type: $s_pci_speed_t
      name: "speed"
      desc: "[out] The current speed of the link (sum of all lanes)"
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI properties - address, max speed"
class: $sDevice
name: PciGetProperties
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_pci_properties_t*
      name: pProperties
      desc: "[in,out] Will contain the PCI properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get current PCI state - current speed"
class: $sDevice
name: PciGetState
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_pci_state_t*
      name: pState
      desc: "[in,out] Will contain the PCI properties."
--- #--------------------------------------------------------------------------
type: function
desc: "Get information about each configured bar"
class: $sDevice
name: PciGetBars
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: "uint32_t*"
      name: pCount
      desc: |
            [in,out] pointer to the number of PCI bars.
            if count is zero, then the driver shall update the value with the total number of PCI bars that are setup.
            if count is greater than the number of PCI bars that are setup, then the driver shall update the value with the correct number of PCI bars.
    - type: "$s_pci_bar_properties_t*"
      name: pProperties
      desc: |
            [in,out][optional][range(0, *pCount)] array of information about setup PCI bars.
            if count is less than the number of PCI bars that are setup, then the driver shall only retrieve information about that number of PCI bars.
--- #--------------------------------------------------------------------------
type: function
desc: "Get PCI stats - bandwidth, number of packets, number of replays"
class: $sDevice
name: PciGetStats
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $s_device_handle_t
      name: hDevice
      desc: "[in] Sysman handle of the device."
    - type: $s_pci_stats_t*
      name: pStats
      desc: "[in,out] Will contain a snapshot of the latest stats."
returns:
    - $X_RESULT_ERROR_INSUFFICIENT_PERMISSIONS:
        - "User does not have permissions to query this telemetry."

--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for driver instance"
name: $sDriver
base: $xDriver
--- #--------------------------------------------------------------------------
type: class
desc: "C++ wrapper for device"
name: $sDevice
base: $xDevice
